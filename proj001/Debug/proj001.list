
proj001.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001c20  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000158  08001dd0  08001dd0  00011dd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001f28  08001f28  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  08001f28  08001f28  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001f28  08001f28  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001f28  08001f28  00011f28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001f2c  08001f2c  00011f2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08001f30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002007c  2**0
                  CONTENTS
 10 .bss          00000070  2000007c  2000007c  0002007c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000ec  200000ec  0002007c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00004b85  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000c28  00000000  00000000  00024c31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001d0  00000000  00000000  00025860  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000178  00000000  00000000  00025a30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001bf5a  00000000  00000000  00025ba8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002820  00000000  00000000  00041b02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00097d36  00000000  00000000  00044322  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  000dc058  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000f00  00000000  00000000  000dc0ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stab         00000084  00000000  00000000  000dcfac  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stabstr      00000117  00000000  00000000  000dd030  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08001db8 	.word	0x08001db8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000080 	.word	0x20000080
 80001ec:	08001db8 	.word	0x08001db8

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000290:	b480      	push	{r7}
 8000292:	b083      	sub	sp, #12
 8000294:	af00      	add	r7, sp, #0
 8000296:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000298:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800029c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80002a0:	f003 0301 	and.w	r3, r3, #1
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d013      	beq.n	80002d0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80002a8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80002ac:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80002b0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d00b      	beq.n	80002d0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80002b8:	e000      	b.n	80002bc <ITM_SendChar+0x2c>
    {
      __NOP();
 80002ba:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80002bc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d0f9      	beq.n	80002ba <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80002c6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80002ca:	687a      	ldr	r2, [r7, #4]
 80002cc:	b2d2      	uxtb	r2, r2
 80002ce:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80002d0:	687b      	ldr	r3, [r7, #4]
}
 80002d2:	4618      	mov	r0, r3
 80002d4:	370c      	adds	r7, #12
 80002d6:	46bd      	mov	sp, r7
 80002d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002dc:	4770      	bx	lr

080002de <_write>:
 */

#include "Helper/logger.h"

int _write(int file, char *ptr, int len)
{
 80002de:	b580      	push	{r7, lr}
 80002e0:	b086      	sub	sp, #24
 80002e2:	af00      	add	r7, sp, #0
 80002e4:	60f8      	str	r0, [r7, #12]
 80002e6:	60b9      	str	r1, [r7, #8]
 80002e8:	607a      	str	r2, [r7, #4]
  int i=0;
 80002ea:	2300      	movs	r3, #0
 80002ec:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 80002ee:	2300      	movs	r3, #0
 80002f0:	617b      	str	r3, [r7, #20]
 80002f2:	e009      	b.n	8000308 <_write+0x2a>
    ITM_SendChar((*ptr++));
 80002f4:	68bb      	ldr	r3, [r7, #8]
 80002f6:	1c5a      	adds	r2, r3, #1
 80002f8:	60ba      	str	r2, [r7, #8]
 80002fa:	781b      	ldrb	r3, [r3, #0]
 80002fc:	4618      	mov	r0, r3
 80002fe:	f7ff ffc7 	bl	8000290 <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 8000302:	697b      	ldr	r3, [r7, #20]
 8000304:	3301      	adds	r3, #1
 8000306:	617b      	str	r3, [r7, #20]
 8000308:	697a      	ldr	r2, [r7, #20]
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	429a      	cmp	r2, r3
 800030e:	dbf1      	blt.n	80002f4 <_write+0x16>

  return len;
 8000310:	687b      	ldr	r3, [r7, #4]
}
 8000312:	4618      	mov	r0, r3
 8000314:	3718      	adds	r7, #24
 8000316:	46bd      	mov	sp, r7
 8000318:	bd80      	pop	{r7, pc}
	...

0800031c <_log>:



static void _log(char const * const logType, char const * const format, va_list args)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	b084      	sub	sp, #16
 8000320:	af00      	add	r7, sp, #0
 8000322:	60f8      	str	r0, [r7, #12]
 8000324:	60b9      	str	r1, [r7, #8]
 8000326:	607a      	str	r2, [r7, #4]
	printf("[%s] : ",logType);
 8000328:	68f9      	ldr	r1, [r7, #12]
 800032a:	4809      	ldr	r0, [pc, #36]	; (8000350 <_log+0x34>)
 800032c:	f001 f848 	bl	80013c0 <iprintf>
	vfprintf(stdout,format,args);
 8000330:	4b08      	ldr	r3, [pc, #32]	; (8000354 <_log+0x38>)
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	689b      	ldr	r3, [r3, #8]
 8000336:	687a      	ldr	r2, [r7, #4]
 8000338:	68b9      	ldr	r1, [r7, #8]
 800033a:	4618      	mov	r0, r3
 800033c:	f000 fea2 	bl	8001084 <vfiprintf>
	printf("\n");
 8000340:	200a      	movs	r0, #10
 8000342:	f001 f855 	bl	80013f0 <putchar>
}
 8000346:	bf00      	nop
 8000348:	3710      	adds	r7, #16
 800034a:	46bd      	mov	sp, r7
 800034c:	bd80      	pop	{r7, pc}
 800034e:	bf00      	nop
 8000350:	08001dd0 	.word	0x08001dd0
 8000354:	20000018 	.word	0x20000018

08000358 <logInfo>:
	_log("ERROR",format,args);
	va_end(args);
}

void logInfo(char const * const format, ...)
{
 8000358:	b40f      	push	{r0, r1, r2, r3}
 800035a:	b580      	push	{r7, lr}
 800035c:	b082      	sub	sp, #8
 800035e:	af00      	add	r7, sp, #0
	va_list args;
		va_start(args,format);
 8000360:	f107 0314 	add.w	r3, r7, #20
 8000364:	607b      	str	r3, [r7, #4]
		_log("INFO",format,args);
 8000366:	687a      	ldr	r2, [r7, #4]
 8000368:	6939      	ldr	r1, [r7, #16]
 800036a:	4805      	ldr	r0, [pc, #20]	; (8000380 <logInfo+0x28>)
 800036c:	f7ff ffd6 	bl	800031c <_log>
		va_end(args);
}
 8000370:	bf00      	nop
 8000372:	3708      	adds	r7, #8
 8000374:	46bd      	mov	sp, r7
 8000376:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800037a:	b004      	add	sp, #16
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop
 8000380:	08001de0 	.word	0x08001de0

08000384 <main>:
#include "usbDevice.h"

USBDevice usbdevice;
uint32_t buffer[8];
int main(void)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	af00      	add	r7, sp, #0
	logInfo("Program Entry Point");
 8000388:	4807      	ldr	r0, [pc, #28]	; (80003a8 <main+0x24>)
 800038a:	f7ff ffe5 	bl	8000358 <logInfo>
	usbdevice.out_buffer = &buffer;
 800038e:	4b07      	ldr	r3, [pc, #28]	; (80003ac <main+0x28>)
 8000390:	4a07      	ldr	r2, [pc, #28]	; (80003b0 <main+0x2c>)
 8000392:	605a      	str	r2, [r3, #4]
    usb_init(&usbdevice);
 8000394:	4805      	ldr	r0, [pc, #20]	; (80003ac <main+0x28>)
 8000396:	f000 fc5d 	bl	8000c54 <usb_init>
    logInfo("Program finished. Entering loop");
 800039a:	4806      	ldr	r0, [pc, #24]	; (80003b4 <main+0x30>)
 800039c:	f7ff ffdc 	bl	8000358 <logInfo>
    /* Loop forever */
	for(;;)
	{
		polling_FW();
 80003a0:	f000 fc74 	bl	8000c8c <polling_FW>
 80003a4:	e7fc      	b.n	80003a0 <main+0x1c>
 80003a6:	bf00      	nop
 80003a8:	08001df0 	.word	0x08001df0
 80003ac:	200000a8 	.word	0x200000a8
 80003b0:	200000bc 	.word	0x200000bc
 80003b4:	08001e04 	.word	0x08001e04

080003b8 <clock_config>:
 *                the below mentioned values. The idea is to generate 48MHz of clock
 *                for comms.
 *                PLLM = 4 PLLN = 72 PLLP = 2 PLLQ = 3 AHBP = 1 APB1 = 2 APB2 = 1
 *
 */
static void clock_config(void) {
 80003b8:	b480      	push	{r7}
 80003ba:	af00      	add	r7, sp, #0
	//Configuring the flash latency for HCLK = 72MHz
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 80003bc:	4b26      	ldr	r3, [pc, #152]	; (8000458 <clock_config+0xa0>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	f023 030f 	bic.w	r3, r3, #15
 80003c4:	4a24      	ldr	r2, [pc, #144]	; (8000458 <clock_config+0xa0>)
 80003c6:	f043 0302 	orr.w	r3, r3, #2
 80003ca:	6013      	str	r3, [r2, #0]
			_VAL2FLD(FLASH_ACR_LATENCY,FLASH_ACR_LATENCY_2WS));
	//Enabling HSE
	SET_BIT(RCC->CR, RCC_CR_HSEON);
 80003cc:	4b23      	ldr	r3, [pc, #140]	; (800045c <clock_config+0xa4>)
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	4a22      	ldr	r2, [pc, #136]	; (800045c <clock_config+0xa4>)
 80003d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80003d6:	6013      	str	r3, [r2, #0]
	//Wait till HSE is stable
	while(!(READ_BIT(RCC->CR,RCC_CR_HSERDY)));
 80003d8:	bf00      	nop
 80003da:	4b20      	ldr	r3, [pc, #128]	; (800045c <clock_config+0xa4>)
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d0f9      	beq.n	80003da <clock_config+0x22>
	//Configuring PLL
	MODIFY_REG(RCC->PLLCFGR,
 80003e6:	4b1d      	ldr	r3, [pc, #116]	; (800045c <clock_config+0xa4>)
 80003e8:	685b      	ldr	r3, [r3, #4]
 80003ea:	4a1d      	ldr	r2, [pc, #116]	; (8000460 <clock_config+0xa8>)
 80003ec:	401a      	ands	r2, r3
 80003ee:	491b      	ldr	r1, [pc, #108]	; (800045c <clock_config+0xa4>)
 80003f0:	4b1c      	ldr	r3, [pc, #112]	; (8000464 <clock_config+0xac>)
 80003f2:	4313      	orrs	r3, r2
 80003f4:	604b      	str	r3, [r1, #4]
			RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLP | RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLQ,
			_VAL2FLD(RCC_PLLCFGR_PLLM,4) | _VAL2FLD(RCC_PLLCFGR_PLLN,72) | _VAL2FLD(RCC_PLLCFGR_PLLP,0) | RCC_PLLCFGR_PLLSRC_HSE | RCC_PLLCFGR_PLLQ_3);

	//Activate PLL and wait till it is generated.
	SET_BIT(RCC->CR,RCC_CR_PLLON);
 80003f6:	4b19      	ldr	r3, [pc, #100]	; (800045c <clock_config+0xa4>)
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	4a18      	ldr	r2, [pc, #96]	; (800045c <clock_config+0xa4>)
 80003fc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000400:	6013      	str	r3, [r2, #0]
	while(!(READ_BIT(RCC->CR,RCC_CR_PLLRDY)));
 8000402:	bf00      	nop
 8000404:	4b15      	ldr	r3, [pc, #84]	; (800045c <clock_config+0xa4>)
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800040c:	2b00      	cmp	r3, #0
 800040e:	d0f9      	beq.n	8000404 <clock_config+0x4c>
	//Configuring BUS peripheral clocks
	MODIFY_REG(RCC->CFGR,
 8000410:	4b12      	ldr	r3, [pc, #72]	; (800045c <clock_config+0xa4>)
 8000412:	689b      	ldr	r3, [r3, #8]
 8000414:	f423 437c 	bic.w	r3, r3, #64512	; 0xfc00
 8000418:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800041c:	4a0f      	ldr	r2, [pc, #60]	; (800045c <clock_config+0xa4>)
 800041e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000422:	6093      	str	r3, [r2, #8]
				RCC_CFGR_HPRE | RCC_CFGR_PPRE1 | RCC_CFGR_PPRE2,
				RCC_CFGR_HPRE_DIV1 | RCC_CFGR_PPRE1_DIV2 | RCC_CFGR_PPRE2_DIV1);

	//Changing Sysclock to pll
	MODIFY_REG(RCC->CFGR,
 8000424:	4b0d      	ldr	r3, [pc, #52]	; (800045c <clock_config+0xa4>)
 8000426:	689b      	ldr	r3, [r3, #8]
 8000428:	f023 0303 	bic.w	r3, r3, #3
 800042c:	4a0b      	ldr	r2, [pc, #44]	; (800045c <clock_config+0xa4>)
 800042e:	f043 0302 	orr.w	r3, r3, #2
 8000432:	6093      	str	r3, [r2, #8]
					(RCC_CFGR_SW),
					RCC_CFGR_SW_PLL);

	//Wait till PLL is selected as clock source for sysclock
		while(!(READ_BIT(RCC->CFGR,RCC_CFGR_SWS_PLL)));
 8000434:	bf00      	nop
 8000436:	4b09      	ldr	r3, [pc, #36]	; (800045c <clock_config+0xa4>)
 8000438:	689b      	ldr	r3, [r3, #8]
 800043a:	f003 0308 	and.w	r3, r3, #8
 800043e:	2b00      	cmp	r3, #0
 8000440:	d0f9      	beq.n	8000436 <clock_config+0x7e>
	//HSI OFF
	CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8000442:	4b06      	ldr	r3, [pc, #24]	; (800045c <clock_config+0xa4>)
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	4a05      	ldr	r2, [pc, #20]	; (800045c <clock_config+0xa4>)
 8000448:	f023 0301 	bic.w	r3, r3, #1
 800044c:	6013      	str	r3, [r2, #0]
}
 800044e:	bf00      	nop
 8000450:	46bd      	mov	sp, r7
 8000452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000456:	4770      	bx	lr
 8000458:	40023c00 	.word	0x40023c00
 800045c:	40023800 	.word	0x40023800
 8000460:	f0bc8000 	.word	0xf0bc8000
 8000464:	03401204 	.word	0x03401204

08000468 <clock_check>:

static void clock_check(void)
{
 8000468:	b480      	push	{r7}
 800046a:	af00      	add	r7, sp, #0
	//Enable Clock to GPIOC
	SET_BIT(RCC->AHB1ENR,RCC_AHB1ENR_GPIOCEN);
 800046c:	4b15      	ldr	r3, [pc, #84]	; (80004c4 <clock_check+0x5c>)
 800046e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000470:	4a14      	ldr	r2, [pc, #80]	; (80004c4 <clock_check+0x5c>)
 8000472:	f043 0304 	orr.w	r3, r3, #4
 8000476:	6313      	str	r3, [r2, #48]	; 0x30

	//Configuring the parameters for GPIO C pin 9
	//Parameters : Alternate function : AF0, Speed : Low
	SET_BIT(GPIOC->MODER,GPIO_MODER_MODER9_1);     // GPIOC.9 is configured as alternate function
 8000478:	4b13      	ldr	r3, [pc, #76]	; (80004c8 <clock_check+0x60>)
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	4a12      	ldr	r2, [pc, #72]	; (80004c8 <clock_check+0x60>)
 800047e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000482:	6013      	str	r3, [r2, #0]
	MODIFY_REG(GPIOC->OSPEEDR , GPIO_OSPEEDR_OSPEED9 , _VAL2FLD(GPIO_OSPEEDR_OSPEED9,0)); // Speed is set to low
 8000484:	4b10      	ldr	r3, [pc, #64]	; (80004c8 <clock_check+0x60>)
 8000486:	689b      	ldr	r3, [r3, #8]
 8000488:	4a0f      	ldr	r2, [pc, #60]	; (80004c8 <clock_check+0x60>)
 800048a:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 800048e:	6093      	str	r3, [r2, #8]
	MODIFY_REG(GPIOC->AFR[1],GPIO_AFRH_AFSEL9,_VAL2FLD(GPIO_AFRH_AFSEL9,0)); // AF0 is selected
 8000490:	4b0d      	ldr	r3, [pc, #52]	; (80004c8 <clock_check+0x60>)
 8000492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000494:	4a0c      	ldr	r2, [pc, #48]	; (80004c8 <clock_check+0x60>)
 8000496:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800049a:	6253      	str	r3, [r2, #36]	; 0x24

	//Enable MCO registers
	MODIFY_REG(RCC->CFGR, RCC_CFGR_MCO2,_VAL2FLD(RCC_CFGR_MCO2,0x3));
 800049c:	4b09      	ldr	r3, [pc, #36]	; (80004c4 <clock_check+0x5c>)
 800049e:	689b      	ldr	r3, [r3, #8]
 80004a0:	4a08      	ldr	r2, [pc, #32]	; (80004c4 <clock_check+0x5c>)
 80004a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80004a6:	6093      	str	r3, [r2, #8]
	//Prescaler value of 2
	MODIFY_REG(RCC->CFGR, RCC_CFGR_MCO2PRE,RCC_CFGR_MCO2PRE_2);
 80004a8:	4b06      	ldr	r3, [pc, #24]	; (80004c4 <clock_check+0x5c>)
 80004aa:	689b      	ldr	r3, [r3, #8]
 80004ac:	f023 5360 	bic.w	r3, r3, #939524096	; 0x38000000
 80004b0:	4a04      	ldr	r2, [pc, #16]	; (80004c4 <clock_check+0x5c>)
 80004b2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80004b6:	6093      	str	r3, [r2, #8]
}
 80004b8:	bf00      	nop
 80004ba:	46bd      	mov	sp, r7
 80004bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop
 80004c4:	40023800 	.word	0x40023800
 80004c8:	40020800 	.word	0x40020800

080004cc <SystemInit>:



void SystemInit(void) {
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
	//logInfo("Entered System Configuration");
	clock_check();
 80004d0:	f7ff ffca 	bl	8000468 <clock_check>
	clock_config();
 80004d4:	f7ff ff70 	bl	80003b8 <clock_config>

}
 80004d8:	bf00      	nop
 80004da:	bd80      	pop	{r7, pc}

080004dc <IEPNT>:
 * @brief : returns the address of the register DIEPCTL(x) where x is the in-endpoint number
 * @return : returns the address of the control register of individual end point
 * @parameters : endpoint_number - The in-endpoint number of whose address you want
 */
inline static USB_OTG_INEndpointTypeDef* IEPNT (uint8_t endpoint_number)
{
 80004dc:	b480      	push	{r7}
 80004de:	b083      	sub	sp, #12
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	4603      	mov	r3, r0
 80004e4:	71fb      	strb	r3, [r7, #7]
 return ((USB_OTG_INEndpointTypeDef*) ( USB_OTG_IN_ENDPOINT_BASE + ( 0x20 * endpoint_number )));
 80004e6:	79fb      	ldrb	r3, [r7, #7]
 80004e8:	015b      	lsls	r3, r3, #5
 80004ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
}
 80004ee:	4618      	mov	r0, r3
 80004f0:	370c      	adds	r7, #12
 80004f2:	46bd      	mov	sp, r7
 80004f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f8:	4770      	bx	lr

080004fa <OEPNT>:
 * @brief : returns the address of the register DIEPCTL(x) where x is the out-endpoint number
 * @return : returns the address of the control register of individual endpoint
 * @parameters : endpoint_number - The out-endpoint number of whose address you want
 */
inline static USB_OTG_OUTEndpointTypeDef* OEPNT (uint8_t endpoint_number)
{
 80004fa:	b480      	push	{r7}
 80004fc:	b083      	sub	sp, #12
 80004fe:	af00      	add	r7, sp, #0
 8000500:	4603      	mov	r3, r0
 8000502:	71fb      	strb	r3, [r7, #7]
 return ((USB_OTG_OUTEndpointTypeDef*) ( USB_OTG_OUT_ENDPOINT_BASE + ( 0x20 * endpoint_number )));
 8000504:	79fb      	ldrb	r3, [r7, #7]
 8000506:	015b      	lsls	r3, r3, #5
 8000508:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
}
 800050c:	4618      	mov	r0, r3
 800050e:	370c      	adds	r7, #12
 8000510:	46bd      	mov	sp, r7
 8000512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000516:	4770      	bx	lr

08000518 <FIFO>:
 * @brief : returns the address of the FIFO registers in order to access them
 * @param : the end point number whose address has to be calculated
 * @retval : the address of the end point mentioned in the argument
 */
inline static __IO uint32_t * FIFO(uint8_t endpoint_no)
{
 8000518:	b480      	push	{r7}
 800051a:	b083      	sub	sp, #12
 800051c:	af00      	add	r7, sp, #0
 800051e:	4603      	mov	r3, r0
 8000520:	71fb      	strb	r3, [r7, #7]
	return ((__IO uint32_t *)(USB_OTG_HS_PERIPH_BASE + USB_OTG_FIFO_BASE + (endpoint_no * 1000UL)));
 8000522:	79fb      	ldrb	r3, [r7, #7]
 8000524:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000528:	fb02 f303 	mul.w	r3, r2, r3
 800052c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000530:	f503 2382 	add.w	r3, r3, #266240	; 0x41000
}
 8000534:	4618      	mov	r0, r3
 8000536:	370c      	adds	r7, #12
 8000538:	46bd      	mov	sp, r7
 800053a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053e:	4770      	bx	lr

08000540 <usb_gpio_init>:
#include "usbDriver.h"
/*
 * @brief : initializing the gpio pins for usb hs communication ie., pb14 (D+) and pb15 (D-)
 */
static void usb_gpio_init(void)
{
 8000540:	b480      	push	{r7}
 8000542:	af00      	add	r7, sp, #0
	//enable clock to the gpio pin
	SET_BIT(RCC->AHB1ENR, RCC_AHB1ENR_GPIOBEN);
 8000544:	4b0d      	ldr	r3, [pc, #52]	; (800057c <usb_gpio_init+0x3c>)
 8000546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000548:	4a0c      	ldr	r2, [pc, #48]	; (800057c <usb_gpio_init+0x3c>)
 800054a:	f043 0302 	orr.w	r3, r3, #2
 800054e:	6313      	str	r3, [r2, #48]	; 0x30

	//configure the pb14 and pb15 as alternate mode
	MODIFY_REG(GPIOB->MODER,
 8000550:	4b0b      	ldr	r3, [pc, #44]	; (8000580 <usb_gpio_init+0x40>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8000558:	4a09      	ldr	r2, [pc, #36]	; (8000580 <usb_gpio_init+0x40>)
 800055a:	f043 4320 	orr.w	r3, r3, #2684354560	; 0xa0000000
 800055e:	6013      	str	r3, [r2, #0]
			GPIO_MODER_MODER14 | GPIO_MODER_MODER15 ,
			GPIO_MODER_MODER14_1 | GPIO_MODER_MODER15_1);

	//usb pins D+ and D- are in alternate function  mode
	MODIFY_REG(GPIOB->AFR[1],
 8000560:	4b07      	ldr	r3, [pc, #28]	; (8000580 <usb_gpio_init+0x40>)
 8000562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000564:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000568:	4a05      	ldr	r2, [pc, #20]	; (8000580 <usb_gpio_init+0x40>)
 800056a:	f043 434c 	orr.w	r3, r3, #3422552064	; 0xcc000000
 800056e:	6253      	str	r3, [r2, #36]	; 0x24
			GPIO_AFRH_AFSEL14 | GPIO_AFRH_AFSEL15,
			_VAL2FLD(GPIO_AFRH_AFSEL14,0xCUL) | _VAL2FLD(GPIO_AFRH_AFSEL15,0xCUL));

}
 8000570:	bf00      	nop
 8000572:	46bd      	mov	sp, r7
 8000574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop
 800057c:	40023800 	.word	0x40023800
 8000580:	40020400 	.word	0x40020400

08000584 <usb_core_init>:
/*
 *  @brief : core initialization for usb according to the user manual
 */

static void usb_core_init(void)
{
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0
	//Enable clock to usb otg hs module
	SET_BIT(RCC->AHB1ENR, RCC_AHB1ENR_OTGHSEN);
 8000588:	4b11      	ldr	r3, [pc, #68]	; (80005d0 <usb_core_init+0x4c>)
 800058a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800058c:	4a10      	ldr	r2, [pc, #64]	; (80005d0 <usb_core_init+0x4c>)
 800058e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000592:	6313      	str	r3, [r2, #48]	; 0x30

	//Unmask the Global Interrupt Line assertion to the core.
	MODIFY_REG(USB_OTG_HS_GLOBAL->GAHBCFG,
 8000594:	4b0f      	ldr	r3, [pc, #60]	; (80005d4 <usb_core_init+0x50>)
 8000596:	689b      	ldr	r3, [r3, #8]
 8000598:	4a0e      	ldr	r2, [pc, #56]	; (80005d4 <usb_core_init+0x50>)
 800059a:	f043 0301 	orr.w	r3, r3, #1
 800059e:	6093      	str	r3, [r2, #8]
			USB_OTG_GAHBCFG_GINT,
			_VAL2FLD(USB_OTG_GAHBCFG_GINT,0x1UL));

	//Selecting USB2.0 High Speed and forcing the device to peripheral mode. Also setting the trdt value as specified in the manual
	MODIFY_REG(USB_OTG_HS_GLOBAL->GUSBCFG,
 80005a0:	4b0c      	ldr	r3, [pc, #48]	; (80005d4 <usb_core_init+0x50>)
 80005a2:	68db      	ldr	r3, [r3, #12]
 80005a4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80005a8:	f423 5371 	bic.w	r3, r3, #15424	; 0x3c40
 80005ac:	4a09      	ldr	r2, [pc, #36]	; (80005d4 <usb_core_init+0x50>)
 80005ae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80005b2:	f443 5311 	orr.w	r3, r3, #9280	; 0x2440
 80005b6:	60d3      	str	r3, [r2, #12]
			USB_OTG_GUSBCFG_PHYSEL | USB_OTG_GUSBCFG_TRDT | USB_OTG_GUSBCFG_FDMOD,
			USB_OTG_GUSBCFG_PHYSEL | _VAL2FLD(USB_OTG_GUSBCFG_TRDT,0x9UL) | USB_OTG_GUSBCFG_FDMOD);

	//Unmasking mode mismatch, otg interrupt and rx buffer full mask
	MODIFY_REG(USB_OTG_HS_GLOBAL->GINTMSK,
 80005b8:	4b06      	ldr	r3, [pc, #24]	; (80005d4 <usb_core_init+0x50>)
 80005ba:	699b      	ldr	r3, [r3, #24]
 80005bc:	4a05      	ldr	r2, [pc, #20]	; (80005d4 <usb_core_init+0x50>)
 80005be:	f043 0316 	orr.w	r3, r3, #22
 80005c2:	6193      	str	r3, [r2, #24]
			USB_OTG_GINTMSK_MMISM | USB_OTG_GINTMSK_OTGINT | USB_OTG_GINTMSK_RXFLVLM,
			USB_OTG_GINTMSK_MMISM | USB_OTG_GINTMSK_OTGINT | USB_OTG_GINTMSK_RXFLVLM);
}
 80005c4:	bf00      	nop
 80005c6:	46bd      	mov	sp, r7
 80005c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop
 80005d0:	40023800 	.word	0x40023800
 80005d4:	40040000 	.word	0x40040000

080005d8 <device_core_init>:
/*
 * @brief : initializing the device core according to the manual
 */

static void device_core_init(void)
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0
	//Setting the device to use the internal embedded PHY layer and in Full Speed mode
	MODIFY_REG(USB_OTG_HS_DEVICE->DCFG,
 80005dc:	4b13      	ldr	r3, [pc, #76]	; (800062c <device_core_init+0x54>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	4a12      	ldr	r2, [pc, #72]	; (800062c <device_core_init+0x54>)
 80005e2:	f043 0303 	orr.w	r3, r3, #3
 80005e6:	6013      	str	r3, [r2, #0]
			USB_OTG_DCFG_DSPD,
			_VAL2FLD(USB_OTG_DCFG_DSPD,0x3UL));

	//Clearing all the registers
		WRITE_REG(USB_OTG_HS_GLOBAL->GINTMSK,0xFFFFFFFFUL);
 80005e8:	4b11      	ldr	r3, [pc, #68]	; (8000630 <device_core_init+0x58>)
 80005ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80005ee:	619a      	str	r2, [r3, #24]

	//Unmasking the following interrupts : USB reset, Enumeration done, Early suspend, USB suspend, SOF
	MODIFY_REG(USB_OTG_HS_GLOBAL->GINTMSK,
 80005f0:	4b0f      	ldr	r3, [pc, #60]	; (8000630 <device_core_init+0x58>)
 80005f2:	699a      	ldr	r2, [r3, #24]
 80005f4:	490e      	ldr	r1, [pc, #56]	; (8000630 <device_core_init+0x58>)
 80005f6:	4b0f      	ldr	r3, [pc, #60]	; (8000634 <device_core_init+0x5c>)
 80005f8:	4313      	orrs	r3, r2
 80005fa:	618b      	str	r3, [r1, #24]
			USB_OTG_GINTMSK_SOFM | USB_OTG_GINTMSK_ESUSPM | USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST | USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT | USB_OTG_GINTMSK_OEPINT,
			USB_OTG_GINTMSK_SOFM | USB_OTG_GINTMSK_ESUSPM | USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST | USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT | USB_OTG_GINTMSK_OEPINT);

	//Enabling the VBUS Sensing
	SET_BIT(USB_OTG_HS_GLOBAL->GCCFG,USB_OTG_GCCFG_VBUSASEN);
 80005fc:	4b0c      	ldr	r3, [pc, #48]	; (8000630 <device_core_init+0x58>)
 80005fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000600:	4a0b      	ldr	r2, [pc, #44]	; (8000630 <device_core_init+0x58>)
 8000602:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000606:	6393      	str	r3, [r2, #56]	; 0x38

	//Unmasking transfer and receive completed interrupt mask
	SET_BIT(USB_OTG_HS_DEVICE->DOEPMSK,USB_OTG_DOEPMSK_XFRCM);
 8000608:	4b08      	ldr	r3, [pc, #32]	; (800062c <device_core_init+0x54>)
 800060a:	695b      	ldr	r3, [r3, #20]
 800060c:	4a07      	ldr	r2, [pc, #28]	; (800062c <device_core_init+0x54>)
 800060e:	f043 0301 	orr.w	r3, r3, #1
 8000612:	6153      	str	r3, [r2, #20]
	SET_BIT(USB_OTG_HS_DEVICE->DIEPMSK,USB_OTG_DIEPMSK_XFRCM);
 8000614:	4b05      	ldr	r3, [pc, #20]	; (800062c <device_core_init+0x54>)
 8000616:	691b      	ldr	r3, [r3, #16]
 8000618:	4a04      	ldr	r2, [pc, #16]	; (800062c <device_core_init+0x54>)
 800061a:	f043 0301 	orr.w	r3, r3, #1
 800061e:	6113      	str	r3, [r2, #16]
}
 8000620:	bf00      	nop
 8000622:	46bd      	mov	sp, r7
 8000624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000628:	4770      	bx	lr
 800062a:	bf00      	nop
 800062c:	40040800 	.word	0x40040800
 8000630:	40040000 	.word	0x40040000
 8000634:	000c3c08 	.word	0x000c3c08

08000638 <connect_usb>:
/*
 * @brief : enabling the trans-receivers and disabling the power down to enable usb communication
 */

static void connect_usb(void)
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0
	//Disabling powerdown
	SET_BIT(USB_OTG_HS_GLOBAL->GCCFG,USB_OTG_GCCFG_PWRDWN);
 800063c:	4b08      	ldr	r3, [pc, #32]	; (8000660 <connect_usb+0x28>)
 800063e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000640:	4a07      	ldr	r2, [pc, #28]	; (8000660 <connect_usb+0x28>)
 8000642:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000646:	6393      	str	r3, [r2, #56]	; 0x38

	//Disabling soft disconnect
	CLEAR_BIT(USB_OTG_HS_DEVICE->DCTL,USB_OTG_DCTL_SDIS);
 8000648:	4b06      	ldr	r3, [pc, #24]	; (8000664 <connect_usb+0x2c>)
 800064a:	685b      	ldr	r3, [r3, #4]
 800064c:	4a05      	ldr	r2, [pc, #20]	; (8000664 <connect_usb+0x2c>)
 800064e:	f023 0302 	bic.w	r3, r3, #2
 8000652:	6053      	str	r3, [r2, #4]
}
 8000654:	bf00      	nop
 8000656:	46bd      	mov	sp, r7
 8000658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop
 8000660:	40040000 	.word	0x40040000
 8000664:	40040800 	.word	0x40040800

08000668 <disconnect_usb>:
/*
 * @brief : disabling the trans-receivers and enabling the power down mode
 */

static void disconnect_usb(void)
{
 8000668:	b480      	push	{r7}
 800066a:	af00      	add	r7, sp, #0
	//Enabling soft disconnect
	SET_BIT(USB_OTG_HS_DEVICE->DCTL,USB_OTG_DCTL_SDIS);
 800066c:	4b08      	ldr	r3, [pc, #32]	; (8000690 <disconnect_usb+0x28>)
 800066e:	685b      	ldr	r3, [r3, #4]
 8000670:	4a07      	ldr	r2, [pc, #28]	; (8000690 <disconnect_usb+0x28>)
 8000672:	f043 0302 	orr.w	r3, r3, #2
 8000676:	6053      	str	r3, [r2, #4]

	//Enabling powerdown
	CLEAR_BIT(USB_OTG_HS_GLOBAL->GCCFG,USB_OTG_GCCFG_PWRDWN);
 8000678:	4b06      	ldr	r3, [pc, #24]	; (8000694 <disconnect_usb+0x2c>)
 800067a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800067c:	4a05      	ldr	r2, [pc, #20]	; (8000694 <disconnect_usb+0x2c>)
 800067e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000682:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000684:	bf00      	nop
 8000686:	46bd      	mov	sp, r7
 8000688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop
 8000690:	40040800 	.word	0x40040800
 8000694:	40040000 	.word	0x40040000

08000698 <setAddress>:
 * @brief : setting the address of the device for reset purpose
 * @param add : the address that you want for the device
 */

static void setAddress(uint8_t add)
{
 8000698:	b480      	push	{r7}
 800069a:	b083      	sub	sp, #12
 800069c:	af00      	add	r7, sp, #0
 800069e:	4603      	mov	r3, r0
 80006a0:	71fb      	strb	r3, [r7, #7]
	MODIFY_REG(USB_OTG_HS_DEVICE->DCFG , USB_OTG_DCFG_DAD , _VAL2FLD(USB_OTG_DCFG_DAD,add));
 80006a2:	4b08      	ldr	r3, [pc, #32]	; (80006c4 <setAddress+0x2c>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	f423 62fe 	bic.w	r2, r3, #2032	; 0x7f0
 80006aa:	79fb      	ldrb	r3, [r7, #7]
 80006ac:	011b      	lsls	r3, r3, #4
 80006ae:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80006b2:	4904      	ldr	r1, [pc, #16]	; (80006c4 <setAddress+0x2c>)
 80006b4:	4313      	orrs	r3, r2
 80006b6:	600b      	str	r3, [r1, #0]
}
 80006b8:	bf00      	nop
 80006ba:	370c      	adds	r7, #12
 80006bc:	46bd      	mov	sp, r7
 80006be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c2:	4770      	bx	lr
 80006c4:	40040800 	.word	0x40040800

080006c8 <refresh_fifo_address>:
/*
 * @brief : refresh the addresses of all end points after usb reset
 */

static void refresh_fifo_address(void)
{
 80006c8:	b480      	push	{r7}
 80006ca:	b083      	sub	sp, #12
 80006cc:	af00      	add	r7, sp, #0
	//Getting the starting address of tx FIFO by calculating where the RX FIFO ends
	uint32_t startAddress = _FLD2VAL(USB_OTG_GRXFSIZ_RXFD,USB_OTG_HS_GLOBAL->GRXFSIZ) * 4;
 80006ce:	4b22      	ldr	r3, [pc, #136]	; (8000758 <refresh_fifo_address+0x90>)
 80006d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006d2:	b29b      	uxth	r3, r3
 80006d4:	009b      	lsls	r3, r3, #2
 80006d6:	607b      	str	r3, [r7, #4]

	//Setting the start address of TX0 FIFO register
	MODIFY_REG(USB_OTG_HS_GLOBAL->DIEPTXF0_HNPTXFSIZ,USB_OTG_TX0FSA,_VAL2FLD(USB_OTG_TX0FSA,startAddress));
 80006d8:	4b1f      	ldr	r3, [pc, #124]	; (8000758 <refresh_fifo_address+0x90>)
 80006da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006dc:	0c1b      	lsrs	r3, r3, #16
 80006de:	041b      	lsls	r3, r3, #16
 80006e0:	687a      	ldr	r2, [r7, #4]
 80006e2:	b292      	uxth	r2, r2
 80006e4:	491c      	ldr	r1, [pc, #112]	; (8000758 <refresh_fifo_address+0x90>)
 80006e6:	4313      	orrs	r3, r2
 80006e8:	628b      	str	r3, [r1, #40]	; 0x28

	startAddress +=  _FLD2VAL(USB_OTG_TX0FD,USB_OTG_HS_GLOBAL->DIEPTXF0_HNPTXFSIZ) * 4;
 80006ea:	4b1b      	ldr	r3, [pc, #108]	; (8000758 <refresh_fifo_address+0x90>)
 80006ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006ee:	0c1b      	lsrs	r3, r3, #16
 80006f0:	b29b      	uxth	r3, r3
 80006f2:	009b      	lsls	r3, r3, #2
 80006f4:	687a      	ldr	r2, [r7, #4]
 80006f6:	4413      	add	r3, r2
 80006f8:	607b      	str	r3, [r7, #4]

	for (uint8_t i = 0 ; i <= MAXENDPOINT-1 ; i++ )
 80006fa:	2300      	movs	r3, #0
 80006fc:	70fb      	strb	r3, [r7, #3]
 80006fe:	e020      	b.n	8000742 <refresh_fifo_address+0x7a>
	{
		MODIFY_REG(USB_OTG_HS_GLOBAL->DIEPTXF[i], USB_OTG_NPTXFSA , _VAL2FLD(USB_OTG_NPTXFSA,startAddress));
 8000700:	4a15      	ldr	r2, [pc, #84]	; (8000758 <refresh_fifo_address+0x90>)
 8000702:	78fb      	ldrb	r3, [r7, #3]
 8000704:	3340      	adds	r3, #64	; 0x40
 8000706:	009b      	lsls	r3, r3, #2
 8000708:	4413      	add	r3, r2
 800070a:	685b      	ldr	r3, [r3, #4]
 800070c:	0c1b      	lsrs	r3, r3, #16
 800070e:	041b      	lsls	r3, r3, #16
 8000710:	687a      	ldr	r2, [r7, #4]
 8000712:	b292      	uxth	r2, r2
 8000714:	4810      	ldr	r0, [pc, #64]	; (8000758 <refresh_fifo_address+0x90>)
 8000716:	78f9      	ldrb	r1, [r7, #3]
 8000718:	431a      	orrs	r2, r3
 800071a:	f101 0340 	add.w	r3, r1, #64	; 0x40
 800071e:	009b      	lsls	r3, r3, #2
 8000720:	4403      	add	r3, r0
 8000722:	605a      	str	r2, [r3, #4]
		startAddress +=  _FLD2VAL(USB_OTG_NPTXFD,USB_OTG_HS_GLOBAL->DIEPTXF[i]) * 4;
 8000724:	4a0c      	ldr	r2, [pc, #48]	; (8000758 <refresh_fifo_address+0x90>)
 8000726:	78fb      	ldrb	r3, [r7, #3]
 8000728:	3340      	adds	r3, #64	; 0x40
 800072a:	009b      	lsls	r3, r3, #2
 800072c:	4413      	add	r3, r2
 800072e:	685b      	ldr	r3, [r3, #4]
 8000730:	0c1b      	lsrs	r3, r3, #16
 8000732:	b29b      	uxth	r3, r3
 8000734:	009b      	lsls	r3, r3, #2
 8000736:	687a      	ldr	r2, [r7, #4]
 8000738:	4413      	add	r3, r2
 800073a:	607b      	str	r3, [r7, #4]
	for (uint8_t i = 0 ; i <= MAXENDPOINT-1 ; i++ )
 800073c:	78fb      	ldrb	r3, [r7, #3]
 800073e:	3301      	adds	r3, #1
 8000740:	70fb      	strb	r3, [r7, #3]
 8000742:	78fb      	ldrb	r3, [r7, #3]
 8000744:	2b05      	cmp	r3, #5
 8000746:	d9db      	bls.n	8000700 <refresh_fifo_address+0x38>
	}
}
 8000748:	bf00      	nop
 800074a:	bf00      	nop
 800074c:	370c      	adds	r7, #12
 800074e:	46bd      	mov	sp, r7
 8000750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000754:	4770      	bx	lr
 8000756:	bf00      	nop
 8000758:	40040000 	.word	0x40040000

0800075c <configure_rxfifo>:
/*
 * @brief : allocating space and calculating the ram space required for each rx end points
 * @param : size -> size in bytes of the data packet
 */
static void configure_rxfifo(uint8_t size)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
 8000762:	4603      	mov	r3, r0
 8000764:	71fb      	strb	r3, [r7, #7]
	//fifo memory space allocation for rx including ability to receive back to back packets
	size = 10 + ( 2 * ( (size/4) + 1 ) );
 8000766:	79fb      	ldrb	r3, [r7, #7]
 8000768:	089b      	lsrs	r3, r3, #2
 800076a:	b2db      	uxtb	r3, r3
 800076c:	3306      	adds	r3, #6
 800076e:	b2db      	uxtb	r3, r3
 8000770:	005b      	lsls	r3, r3, #1
 8000772:	71fb      	strb	r3, [r7, #7]

	//the ram size required by rx fifo configuration
	MODIFY_REG(USB_OTG_HS_GLOBAL->GRXFSIZ,
 8000774:	4b06      	ldr	r3, [pc, #24]	; (8000790 <configure_rxfifo+0x34>)
 8000776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000778:	0c1b      	lsrs	r3, r3, #16
 800077a:	041b      	lsls	r3, r3, #16
 800077c:	79fa      	ldrb	r2, [r7, #7]
 800077e:	4904      	ldr	r1, [pc, #16]	; (8000790 <configure_rxfifo+0x34>)
 8000780:	4313      	orrs	r3, r2
 8000782:	624b      	str	r3, [r1, #36]	; 0x24
			USB_OTG_GRXFSIZ_RXFD ,
			_VAL2FLD(USB_OTG_GRXFSIZ_RXFD,size));
	refresh_fifo_address();
 8000784:	f7ff ffa0 	bl	80006c8 <refresh_fifo_address>
}
 8000788:	bf00      	nop
 800078a:	3708      	adds	r7, #8
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	40040000 	.word	0x40040000

08000794 <configure_txfifo>:
 * @param : size -> size in bytes of the data packet
 * 			endpoint_no -> the index of the end point to be configured
 */

static void configure_txfifo(uint8_t size, uint8_t endpoint_no)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0
 800079a:	4603      	mov	r3, r0
 800079c:	460a      	mov	r2, r1
 800079e:	71fb      	strb	r3, [r7, #7]
 80007a0:	4613      	mov	r3, r2
 80007a2:	71bb      	strb	r3, [r7, #6]
	size = ( size + 3 ) / 4;
 80007a4:	79fb      	ldrb	r3, [r7, #7]
 80007a6:	3303      	adds	r3, #3
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	da00      	bge.n	80007ae <configure_txfifo+0x1a>
 80007ac:	3303      	adds	r3, #3
 80007ae:	109b      	asrs	r3, r3, #2
 80007b0:	71fb      	strb	r3, [r7, #7]

	if(endpoint_no == 0)
 80007b2:	79bb      	ldrb	r3, [r7, #6]
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d108      	bne.n	80007ca <configure_txfifo+0x36>
	{
		MODIFY_REG(USB_OTG_HS_GLOBAL->DIEPTXF0_HNPTXFSIZ, USB_OTG_TX0FD , _VAL2FLD(USB_OTG_TX0FD,size));
 80007b8:	4b10      	ldr	r3, [pc, #64]	; (80007fc <configure_txfifo+0x68>)
 80007ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007bc:	b29a      	uxth	r2, r3
 80007be:	79fb      	ldrb	r3, [r7, #7]
 80007c0:	041b      	lsls	r3, r3, #16
 80007c2:	490e      	ldr	r1, [pc, #56]	; (80007fc <configure_txfifo+0x68>)
 80007c4:	4313      	orrs	r3, r2
 80007c6:	628b      	str	r3, [r1, #40]	; 0x28
 80007c8:	e011      	b.n	80007ee <configure_txfifo+0x5a>
	}
	else
	{
		MODIFY_REG(USB_OTG_HS_GLOBAL->DIEPTXF[endpoint_no - 1], USB_OTG_NPTXFD , _VAL2FLD(USB_OTG_NPTXFD,size));
 80007ca:	4a0c      	ldr	r2, [pc, #48]	; (80007fc <configure_txfifo+0x68>)
 80007cc:	79bb      	ldrb	r3, [r7, #6]
 80007ce:	3b01      	subs	r3, #1
 80007d0:	3340      	adds	r3, #64	; 0x40
 80007d2:	009b      	lsls	r3, r3, #2
 80007d4:	4413      	add	r3, r2
 80007d6:	685b      	ldr	r3, [r3, #4]
 80007d8:	b299      	uxth	r1, r3
 80007da:	79fb      	ldrb	r3, [r7, #7]
 80007dc:	041a      	lsls	r2, r3, #16
 80007de:	4807      	ldr	r0, [pc, #28]	; (80007fc <configure_txfifo+0x68>)
 80007e0:	79bb      	ldrb	r3, [r7, #6]
 80007e2:	3b01      	subs	r3, #1
 80007e4:	430a      	orrs	r2, r1
 80007e6:	3340      	adds	r3, #64	; 0x40
 80007e8:	009b      	lsls	r3, r3, #2
 80007ea:	4403      	add	r3, r0
 80007ec:	605a      	str	r2, [r3, #4]
	}
	refresh_fifo_address();
 80007ee:	f7ff ff6b 	bl	80006c8 <refresh_fifo_address>
}
 80007f2:	bf00      	nop
 80007f4:	3708      	adds	r7, #8
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	40040000 	.word	0x40040000

08000800 <configure_endpoint0>:
/* @brief : Configures the end point 0
 * @parameters : endpointsize - The maximum size (in bytes) of the end point packets which is 64 bytes
 */

static void configure_endpoint0(uint8_t endpoint_size)
{
 8000800:	b590      	push	{r4, r7, lr}
 8000802:	b083      	sub	sp, #12
 8000804:	af00      	add	r7, sp, #0
 8000806:	4603      	mov	r3, r0
 8000808:	71fb      	strb	r3, [r7, #7]
	//unmask all the interrupts regarding the end-point 0 to interrupt application when an event occurs
	SET_BIT(USB_OTG_HS_DEVICE->DAINTMSK, 1 << 0 | 1 << 16);
 800080a:	4b16      	ldr	r3, [pc, #88]	; (8000864 <configure_endpoint0+0x64>)
 800080c:	69db      	ldr	r3, [r3, #28]
 800080e:	4a15      	ldr	r2, [pc, #84]	; (8000864 <configure_endpoint0+0x64>)
 8000810:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8000814:	61d3      	str	r3, [r2, #28]

	//set nak, configure the maximum packet size and activate the end point
	MODIFY_REG(IEPNT(0)->DIEPCTL,
 8000816:	2000      	movs	r0, #0
 8000818:	f7ff fe60 	bl	80004dc <IEPNT>
 800081c:	4603      	mov	r3, r0
 800081e:	681a      	ldr	r2, [r3, #0]
 8000820:	4b11      	ldr	r3, [pc, #68]	; (8000868 <configure_endpoint0+0x68>)
 8000822:	4013      	ands	r3, r2
 8000824:	79fa      	ldrb	r2, [r7, #7]
 8000826:	ea43 0402 	orr.w	r4, r3, r2
 800082a:	2000      	movs	r0, #0
 800082c:	f7ff fe56 	bl	80004dc <IEPNT>
 8000830:	4602      	mov	r2, r0
 8000832:	f044 6300 	orr.w	r3, r4, #134217728	; 0x8000000
 8000836:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800083a:	6013      	str	r3, [r2, #0]
			USB_OTG_DIEPCTL_MPSIZ | USB_OTG_DIEPCTL_SNAK | USB_OTG_DIEPCTL_USBAEP,
			_VAL2FLD(USB_OTG_DIEPCTL_MPSIZ,endpoint_size) | USB_OTG_DIEPCTL_SNAK | USB_OTG_DIEPCTL_USBAEP);

	//clears NAK and enables data end point transmission
	SET_BIT(OEPNT(0)->DOEPCTL,
 800083c:	2000      	movs	r0, #0
 800083e:	f7ff fe5c 	bl	80004fa <OEPNT>
 8000842:	4603      	mov	r3, r0
 8000844:	681a      	ldr	r2, [r3, #0]
 8000846:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 800084a:	601a      	str	r2, [r3, #0]
			USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);

	//configuring the rx and tx0 fifo
	configure_rxfifo(64);    //maximum possible size
 800084c:	2040      	movs	r0, #64	; 0x40
 800084e:	f7ff ff85 	bl	800075c <configure_rxfifo>
	configure_txfifo(endpoint_size, 0);
 8000852:	79fb      	ldrb	r3, [r7, #7]
 8000854:	2100      	movs	r1, #0
 8000856:	4618      	mov	r0, r3
 8000858:	f7ff ff9c 	bl	8000794 <configure_txfifo>
}
 800085c:	bf00      	nop
 800085e:	370c      	adds	r7, #12
 8000860:	46bd      	mov	sp, r7
 8000862:	bd90      	pop	{r4, r7, pc}
 8000864:	40040800 	.word	0x40040800
 8000868:	f7ff7800 	.word	0xf7ff7800

0800086c <configure_in_endpoint>:

static void configure_in_endpoint(uint8_t endpoint_no , USBEndPointType eptype , uint8_t endpoint_size)
{
 800086c:	b590      	push	{r4, r7, lr}
 800086e:	b083      	sub	sp, #12
 8000870:	af00      	add	r7, sp, #0
 8000872:	4603      	mov	r3, r0
 8000874:	71fb      	strb	r3, [r7, #7]
 8000876:	460b      	mov	r3, r1
 8000878:	71bb      	strb	r3, [r7, #6]
 800087a:	4613      	mov	r3, r2
 800087c:	717b      	strb	r3, [r7, #5]
	//unmask all the interrupts regarding the end-points to interrupt application when an event occurs
	SET_BIT(USB_OTG_HS_DEVICE->DAINTMSK, 1 << endpoint_no);
 800087e:	4b18      	ldr	r3, [pc, #96]	; (80008e0 <configure_in_endpoint+0x74>)
 8000880:	69db      	ldr	r3, [r3, #28]
 8000882:	79fa      	ldrb	r2, [r7, #7]
 8000884:	2101      	movs	r1, #1
 8000886:	fa01 f202 	lsl.w	r2, r1, r2
 800088a:	4611      	mov	r1, r2
 800088c:	4a14      	ldr	r2, [pc, #80]	; (80008e0 <configure_in_endpoint+0x74>)
 800088e:	430b      	orrs	r3, r1
 8000890:	61d3      	str	r3, [r2, #28]

	//set nak, configure the maximum packet size and activate the end point and specify the type of the end point
	MODIFY_REG(IEPNT(endpoint_no)->DIEPCTL,
 8000892:	79fb      	ldrb	r3, [r7, #7]
 8000894:	4618      	mov	r0, r3
 8000896:	f7ff fe21 	bl	80004dc <IEPNT>
 800089a:	4603      	mov	r3, r0
 800089c:	681a      	ldr	r2, [r3, #0]
 800089e:	4b11      	ldr	r3, [pc, #68]	; (80008e4 <configure_in_endpoint+0x78>)
 80008a0:	4013      	ands	r3, r2
 80008a2:	7979      	ldrb	r1, [r7, #5]
 80008a4:	79ba      	ldrb	r2, [r7, #6]
 80008a6:	4311      	orrs	r1, r2
 80008a8:	79fa      	ldrb	r2, [r7, #7]
 80008aa:	0592      	lsls	r2, r2, #22
 80008ac:	f002 7270 	and.w	r2, r2, #62914560	; 0x3c00000
 80008b0:	430a      	orrs	r2, r1
 80008b2:	ea43 0402 	orr.w	r4, r3, r2
 80008b6:	79fb      	ldrb	r3, [r7, #7]
 80008b8:	4618      	mov	r0, r3
 80008ba:	f7ff fe0f 	bl	80004dc <IEPNT>
 80008be:	4602      	mov	r2, r0
 80008c0:	f044 53c0 	orr.w	r3, r4, #402653184	; 0x18000000
 80008c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80008c8:	6013      	str	r3, [r2, #0]
				USB_OTG_DIEPCTL_MPSIZ | USB_OTG_DIEPCTL_EPTYP | USB_OTG_DIEPCTL_SNAK | USB_OTG_DIEPCTL_TXFNUM | USB_OTG_DIEPCTL_USBAEP | USB_OTG_DIEPCTL_SD0PID_SEVNFRM,
				_VAL2FLD(USB_OTG_DIEPCTL_MPSIZ,endpoint_size) | _VAL2FLD(USB_OTG_DIEPCTL_MPSIZ,eptype) | USB_OTG_DIEPCTL_SNAK | _VAL2FLD(USB_OTG_DIEPCTL_TXFNUM,endpoint_no) | USB_OTG_DIEPCTL_USBAEP | USB_OTG_DIEPCTL_SD0PID_SEVNFRM);

	//configuring the tx fifo
	configure_txfifo(endpoint_size, endpoint_no);
 80008ca:	79fa      	ldrb	r2, [r7, #7]
 80008cc:	797b      	ldrb	r3, [r7, #5]
 80008ce:	4611      	mov	r1, r2
 80008d0:	4618      	mov	r0, r3
 80008d2:	f7ff ff5f 	bl	8000794 <configure_txfifo>
}
 80008d6:	bf00      	nop
 80008d8:	370c      	adds	r7, #12
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd90      	pop	{r4, r7, pc}
 80008de:	bf00      	nop
 80008e0:	40040800 	.word	0x40040800
 80008e4:	e4337800 	.word	0xe4337800

080008e8 <read_Packet>:
 * @param size : the size of the packet that has to be read
 * @param buffer : the buffer where we store the popped data
 */

static void read_Packet(uint16_t size,void* buffer)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b086      	sub	sp, #24
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	4603      	mov	r3, r0
 80008f0:	6039      	str	r1, [r7, #0]
 80008f2:	80fb      	strh	r3, [r7, #6]
	//Getting the address of the only rx fifo buffer
	uint32_t* rxfifo = FIFO(0);
 80008f4:	2000      	movs	r0, #0
 80008f6:	f7ff fe0f 	bl	8000518 <FIFO>
 80008fa:	6138      	str	r0, [r7, #16]

	//Loop to extract data from the fifo one word (32 bit or 4 bytes) at a time
	for(; size>=4 ; size-=4 , buffer +=4)
 80008fc:	e00b      	b.n	8000916 <read_Packet+0x2e>
	{
		//popping data from the fifo and storing it in a variable
		uint32_t data = *rxfifo;
 80008fe:	693b      	ldr	r3, [r7, #16]
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	60fb      	str	r3, [r7, #12]
		//storing the popped data from the fifo to the buffer to get the data
		*((uint32_t*) buffer) = data;
 8000904:	683b      	ldr	r3, [r7, #0]
 8000906:	68fa      	ldr	r2, [r7, #12]
 8000908:	601a      	str	r2, [r3, #0]
	for(; size>=4 ; size-=4 , buffer +=4)
 800090a:	88fb      	ldrh	r3, [r7, #6]
 800090c:	3b04      	subs	r3, #4
 800090e:	80fb      	strh	r3, [r7, #6]
 8000910:	683b      	ldr	r3, [r7, #0]
 8000912:	3304      	adds	r3, #4
 8000914:	603b      	str	r3, [r7, #0]
 8000916:	88fb      	ldrh	r3, [r7, #6]
 8000918:	2b03      	cmp	r3, #3
 800091a:	d8f0      	bhi.n	80008fe <read_Packet+0x16>
	}

	//This are executes only if the size of the data is not a multiple of 32 bits or 4 bytes
	if (size > 0)
 800091c:	88fb      	ldrh	r3, [r7, #6]
 800091e:	2b00      	cmp	r3, #0
 8000920:	d013      	beq.n	800094a <read_Packet+0x62>
		{
			//Pops the data one byte at a time
			uint32_t data = *rxfifo;
 8000922:	693b      	ldr	r3, [r7, #16]
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	617b      	str	r3, [r7, #20]

			//Manipulating the data so we can get the correct order
			for( ; size>0 ; size-- , buffer++ , data >>= 8)
 8000928:	e00c      	b.n	8000944 <read_Packet+0x5c>
			{
				//Storing the data in the buffer with the correct alignment
				*((uint8_t*)buffer) = 0xFF & data;
 800092a:	697b      	ldr	r3, [r7, #20]
 800092c:	b2da      	uxtb	r2, r3
 800092e:	683b      	ldr	r3, [r7, #0]
 8000930:	701a      	strb	r2, [r3, #0]
			for( ; size>0 ; size-- , buffer++ , data >>= 8)
 8000932:	88fb      	ldrh	r3, [r7, #6]
 8000934:	3b01      	subs	r3, #1
 8000936:	80fb      	strh	r3, [r7, #6]
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	3301      	adds	r3, #1
 800093c:	603b      	str	r3, [r7, #0]
 800093e:	697b      	ldr	r3, [r7, #20]
 8000940:	0a1b      	lsrs	r3, r3, #8
 8000942:	617b      	str	r3, [r7, #20]
 8000944:	88fb      	ldrh	r3, [r7, #6]
 8000946:	2b00      	cmp	r3, #0
 8000948:	d1ef      	bne.n	800092a <read_Packet+0x42>
			}
		}
}
 800094a:	bf00      	nop
 800094c:	3718      	adds	r7, #24
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}

08000952 <write_packet>:
 * @param endpoint_no : the end point number from which you have to send the data
 * @param buffer : The data you want to send from your device
 */

static void write_packet(uint16_t size, uint8_t endpoint_no , void const *buffer)
{
 8000952:	b580      	push	{r7, lr}
 8000954:	b084      	sub	sp, #16
 8000956:	af00      	add	r7, sp, #0
 8000958:	4603      	mov	r3, r0
 800095a:	603a      	str	r2, [r7, #0]
 800095c:	80fb      	strh	r3, [r7, #6]
 800095e:	460b      	mov	r3, r1
 8000960:	717b      	strb	r3, [r7, #5]
	uint32_t* txfifo = FIFO(endpoint_no);
 8000962:	797b      	ldrb	r3, [r7, #5]
 8000964:	4618      	mov	r0, r3
 8000966:	f7ff fdd7 	bl	8000518 <FIFO>
 800096a:	60f8      	str	r0, [r7, #12]
	USB_OTG_INEndpointTypeDef* iepnt = IEPNT(endpoint_no);
 800096c:	797b      	ldrb	r3, [r7, #5]
 800096e:	4618      	mov	r0, r3
 8000970:	f7ff fdb4 	bl	80004dc <IEPNT>
 8000974:	60b8      	str	r0, [r7, #8]

	//Configures the transmission
	MODIFY_REG(iepnt->DIEPTSIZ,
 8000976:	68bb      	ldr	r3, [r7, #8]
 8000978:	691b      	ldr	r3, [r3, #16]
 800097a:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 800097e:	88fb      	ldrh	r3, [r7, #6]
 8000980:	4313      	orrs	r3, r2
 8000982:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000986:	68bb      	ldr	r3, [r7, #8]
 8000988:	611a      	str	r2, [r3, #16]
			USB_OTG_DIEPTSIZ_PKTCNT | USB_OTG_DIEPTSIZ_XFRSIZ,
			_VAL2FLD(USB_OTG_DIEPTSIZ_PKTCNT,1) | _VAL2FLD(USB_OTG_DIEPTSIZ_XFRSIZ,size));

	//Enabling the transmission after clearing the STALL and NAK of the endpoint
	MODIFY_REG(iepnt->DIEPCTL,
 800098a:	68bb      	ldr	r3, [r7, #8]
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	f023 4304 	bic.w	r3, r3, #2214592512	; 0x84000000
 8000992:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000996:	f043 4204 	orr.w	r2, r3, #2214592512	; 0x84000000
 800099a:	68bb      	ldr	r3, [r7, #8]
 800099c:	601a      	str	r2, [r3, #0]
			USB_OTG_DIEPCTL_STALL,
			USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
	//Convert size into word
	size = ( size + 3 ) / 4;
 800099e:	88fb      	ldrh	r3, [r7, #6]
 80009a0:	3303      	adds	r3, #3
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	da00      	bge.n	80009a8 <write_packet+0x56>
 80009a6:	3303      	adds	r3, #3
 80009a8:	109b      	asrs	r3, r3, #2
 80009aa:	80fb      	strh	r3, [r7, #6]

	for(;size > 0 ; size-- ,buffer +=4 )
 80009ac:	e009      	b.n	80009c2 <write_packet+0x70>
	{
		//Pushes the data into the buffer
		*txfifo = *((uint32_t*)buffer);
 80009ae:	683b      	ldr	r3, [r7, #0]
 80009b0:	681a      	ldr	r2, [r3, #0]
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	601a      	str	r2, [r3, #0]
	for(;size > 0 ; size-- ,buffer +=4 )
 80009b6:	88fb      	ldrh	r3, [r7, #6]
 80009b8:	3b01      	subs	r3, #1
 80009ba:	80fb      	strh	r3, [r7, #6]
 80009bc:	683b      	ldr	r3, [r7, #0]
 80009be:	3304      	adds	r3, #4
 80009c0:	603b      	str	r3, [r7, #0]
 80009c2:	88fb      	ldrh	r3, [r7, #6]
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d1f2      	bne.n	80009ae <write_packet+0x5c>
	}
}
 80009c8:	bf00      	nop
 80009ca:	bf00      	nop
 80009cc:	3710      	adds	r7, #16
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
	...

080009d4 <flushRXFIFO>:
/*
 * @brief : flush the rx fifo after use
 */

static void flushRXFIFO(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
	//Flush the rx fifo
	SET_BIT(USB_OTG_HS_GLOBAL->GRSTCTL,USB_OTG_GRSTCTL_RXFFLSH);
 80009d8:	4b05      	ldr	r3, [pc, #20]	; (80009f0 <flushRXFIFO+0x1c>)
 80009da:	691b      	ldr	r3, [r3, #16]
 80009dc:	4a04      	ldr	r2, [pc, #16]	; (80009f0 <flushRXFIFO+0x1c>)
 80009de:	f043 0310 	orr.w	r3, r3, #16
 80009e2:	6113      	str	r3, [r2, #16]

}
 80009e4:	bf00      	nop
 80009e6:	46bd      	mov	sp, r7
 80009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop
 80009f0:	40040000 	.word	0x40040000

080009f4 <flushTXFIFO>:
/*
 * @brief : flush the tx fifo after use
 */

static void flushTXFIFO(uint8_t endpoint_no)
{
 80009f4:	b480      	push	{r7}
 80009f6:	b083      	sub	sp, #12
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	4603      	mov	r3, r0
 80009fc:	71fb      	strb	r3, [r7, #7]
	//Flush the corresponding tx fifo wrt to end point number
	MODIFY_REG(USB_OTG_HS_GLOBAL->GRSTCTL,USB_OTG_GRSTCTL_TXFNUM , _VAL2FLD(USB_OTG_GRSTCTL_TXFNUM,endpoint_no) | USB_OTG_GRSTCTL_TXFFLSH);
 80009fe:	4b09      	ldr	r3, [pc, #36]	; (8000a24 <flushTXFIFO+0x30>)
 8000a00:	691b      	ldr	r3, [r3, #16]
 8000a02:	f423 62f8 	bic.w	r2, r3, #1984	; 0x7c0
 8000a06:	79fb      	ldrb	r3, [r7, #7]
 8000a08:	019b      	lsls	r3, r3, #6
 8000a0a:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8000a0e:	4313      	orrs	r3, r2
 8000a10:	4a04      	ldr	r2, [pc, #16]	; (8000a24 <flushTXFIFO+0x30>)
 8000a12:	f043 0320 	orr.w	r3, r3, #32
 8000a16:	6113      	str	r3, [r2, #16]
}
 8000a18:	bf00      	nop
 8000a1a:	370c      	adds	r7, #12
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a22:	4770      	bx	lr
 8000a24:	40040000 	.word	0x40040000

08000a28 <deconfigure_in_endpoint>:
 * @brief : deconfiguring all of the end points after a usb reset
 * @param : endpoint_no : the end point you want to de-configure
 */

static void deconfigure_in_endpoint(uint8_t endpoint_no )
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b084      	sub	sp, #16
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	4603      	mov	r3, r0
 8000a30:	71fb      	strb	r3, [r7, #7]
	USB_OTG_INEndpointTypeDef* iepnt = IEPNT(endpoint_no);
 8000a32:	79fb      	ldrb	r3, [r7, #7]
 8000a34:	4618      	mov	r0, r3
 8000a36:	f7ff fd51 	bl	80004dc <IEPNT>
 8000a3a:	60f8      	str	r0, [r7, #12]
	USB_OTG_OUTEndpointTypeDef* oepnt = OEPNT(endpoint_no);
 8000a3c:	79fb      	ldrb	r3, [r7, #7]
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f7ff fd5b 	bl	80004fa <OEPNT>
 8000a44:	60b8      	str	r0, [r7, #8]

	//Mask the interrupts of the targeted end point
	CLEAR_BIT(USB_OTG_HS_DEVICE->DAINTMSK, (1 << endpoint_no) | (1 << 16 << endpoint_no));
 8000a46:	4b26      	ldr	r3, [pc, #152]	; (8000ae0 <deconfigure_in_endpoint+0xb8>)
 8000a48:	69db      	ldr	r3, [r3, #28]
 8000a4a:	79fa      	ldrb	r2, [r7, #7]
 8000a4c:	2101      	movs	r1, #1
 8000a4e:	4091      	lsls	r1, r2
 8000a50:	79fa      	ldrb	r2, [r7, #7]
 8000a52:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000a56:	fa00 f202 	lsl.w	r2, r0, r2
 8000a5a:	430a      	orrs	r2, r1
 8000a5c:	43d2      	mvns	r2, r2
 8000a5e:	4611      	mov	r1, r2
 8000a60:	4a1f      	ldr	r2, [pc, #124]	; (8000ae0 <deconfigure_in_endpoint+0xb8>)
 8000a62:	400b      	ands	r3, r1
 8000a64:	61d3      	str	r3, [r2, #28]

	//Clear all the pending interrupts
	SET_BIT(iepnt->DIEPINT,0x29FF);
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	689b      	ldr	r3, [r3, #8]
 8000a6a:	f443 5327 	orr.w	r3, r3, #10688	; 0x29c0
 8000a6e:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 8000a72:	68fa      	ldr	r2, [r7, #12]
 8000a74:	6093      	str	r3, [r2, #8]
	SET_BIT(oepnt->DOEPINT,0x715F);
 8000a76:	68bb      	ldr	r3, [r7, #8]
 8000a78:	689b      	ldr	r3, [r3, #8]
 8000a7a:	f443 43e2 	orr.w	r3, r3, #28928	; 0x7100
 8000a7e:	f043 035f 	orr.w	r3, r3, #95	; 0x5f
 8000a82:	68ba      	ldr	r2, [r7, #8]
 8000a84:	6093      	str	r3, [r2, #8]

	//Deactivating and disabling in end point
	if(iepnt->DIEPCTL & USB_OTG_DIEPCTL_EPENA)
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	da05      	bge.n	8000a9a <deconfigure_in_endpoint+0x72>
	{
		SET_BIT(iepnt->DIEPCTL,USB_OTG_DIEPCTL_EPDIS);
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	601a      	str	r2, [r3, #0]
	}
	CLEAR_BIT(iepnt->DIEPCTL,USB_OTG_DIEPCTL_USBAEP);
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	601a      	str	r2, [r3, #0]

	//Deactivating and disabling out end point barring end point 0
	if(endpoint_no != 0)
 8000aa6:	79fb      	ldrb	r3, [r7, #7]
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d00f      	beq.n	8000acc <deconfigure_in_endpoint+0xa4>
	{
	if(oepnt->DOEPCTL & USB_OTG_DOEPCTL_EPENA)
 8000aac:	68bb      	ldr	r3, [r7, #8]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	da05      	bge.n	8000ac0 <deconfigure_in_endpoint+0x98>
	{
		SET_BIT(oepnt->DOEPCTL,USB_OTG_DOEPCTL_EPDIS);
 8000ab4:	68bb      	ldr	r3, [r7, #8]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8000abc:	68bb      	ldr	r3, [r7, #8]
 8000abe:	601a      	str	r2, [r3, #0]
	}
	CLEAR_BIT(oepnt->DOEPCTL,USB_OTG_DOEPCTL_USBAEP);
 8000ac0:	68bb      	ldr	r3, [r7, #8]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000ac8:	68bb      	ldr	r3, [r7, #8]
 8000aca:	601a      	str	r2, [r3, #0]
	}

	//Flushing the FIFO registers
	flushRXFIFO();
 8000acc:	f7ff ff82 	bl	80009d4 <flushRXFIFO>
	flushTXFIFO(endpoint_no);
 8000ad0:	79fb      	ldrb	r3, [r7, #7]
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f7ff ff8e 	bl	80009f4 <flushTXFIFO>
}
 8000ad8:	bf00      	nop
 8000ada:	3710      	adds	r7, #16
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	40040800 	.word	0x40040800

08000ae4 <usb_rst_handler>:
/*
 * @brief : the reset handler for usb_rst
 */

static void usb_rst_handler(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0
	logInfo("USB reset occurred");
 8000aea:	480b      	ldr	r0, [pc, #44]	; (8000b18 <usb_rst_handler+0x34>)
 8000aec:	f7ff fc34 	bl	8000358 <logInfo>
	for(uint8_t i =0; i<=MAXENDPOINT;i++)
 8000af0:	2300      	movs	r3, #0
 8000af2:	71fb      	strb	r3, [r7, #7]
 8000af4:	e006      	b.n	8000b04 <usb_rst_handler+0x20>
	{
	deconfigure_in_endpoint(i);
 8000af6:	79fb      	ldrb	r3, [r7, #7]
 8000af8:	4618      	mov	r0, r3
 8000afa:	f7ff ff95 	bl	8000a28 <deconfigure_in_endpoint>
	for(uint8_t i =0; i<=MAXENDPOINT;i++)
 8000afe:	79fb      	ldrb	r3, [r7, #7]
 8000b00:	3301      	adds	r3, #1
 8000b02:	71fb      	strb	r3, [r7, #7]
 8000b04:	79fb      	ldrb	r3, [r7, #7]
 8000b06:	2b06      	cmp	r3, #6
 8000b08:	d9f5      	bls.n	8000af6 <usb_rst_handler+0x12>
	}
	usbe.on_usb_reset();
 8000b0a:	4b04      	ldr	r3, [pc, #16]	; (8000b1c <usb_rst_handler+0x38>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	4798      	blx	r3
}
 8000b10:	bf00      	nop
 8000b12:	3708      	adds	r7, #8
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	08001e24 	.word	0x08001e24
 8000b1c:	20000000 	.word	0x20000000

08000b20 <enum_done_handler>:
/*
 * @brief : the interrupt handler for usb enumeration done
 */

static void enum_done_handler(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
	logInfo("USB eneumeration done");
 8000b24:	4803      	ldr	r0, [pc, #12]	; (8000b34 <enum_done_handler+0x14>)
 8000b26:	f7ff fc17 	bl	8000358 <logInfo>
	configure_endpoint0(8);					//for now we will hardcode the maximum packet size to be 8 bytes
 8000b2a:	2008      	movs	r0, #8
 8000b2c:	f7ff fe68 	bl	8000800 <configure_endpoint0>
}
 8000b30:	bf00      	nop
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	08001e38 	.word	0x08001e38

08000b38 <rxflvl_handler>:
/*
 * @brief : the interrupt handler for rx fifo full
 */

static void rxflvl_handler(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b084      	sub	sp, #16
 8000b3c:	af00      	add	r7, sp, #0
	logInfo("RX FIFO full");
 8000b3e:	4824      	ldr	r0, [pc, #144]	; (8000bd0 <rxflvl_handler+0x98>)
 8000b40:	f7ff fc0a 	bl	8000358 <logInfo>

	//reading the value of rx status register and storing it in a variable
	uint32_t receiveStat = USB_OTG_HS_GLOBAL->GRXSTSP;
 8000b44:	4b23      	ldr	r3, [pc, #140]	; (8000bd4 <rxflvl_handler+0x9c>)
 8000b46:	6a1b      	ldr	r3, [r3, #32]
 8000b48:	60fb      	str	r3, [r7, #12]

	//storing from which end point we got the interrupt signal
	uint8_t endpoint_no = _FLD2VAL(USB_OTG_GRXSTSP_EPNUM,receiveStat);
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	b2db      	uxtb	r3, r3
 8000b4e:	f003 030f 	and.w	r3, r3, #15
 8000b52:	72fb      	strb	r3, [r7, #11]

	//storing number of bytes received from the host
	uint16_t bytecnt = _FLD2VAL(USB_OTG_GRXSTSP_BCNT,receiveStat);
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	091b      	lsrs	r3, r3, #4
 8000b58:	b29b      	uxth	r3, r3
 8000b5a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000b5e:	813b      	strh	r3, [r7, #8]

	//storing the packet status to monitor the status
	uint8_t pktsts = _FLD2VAL(USB_OTG_GRXSTSP_PKTSTS, receiveStat);
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	0c5b      	lsrs	r3, r3, #17
 8000b64:	b2db      	uxtb	r3, r3
 8000b66:	f003 030f 	and.w	r3, r3, #15
 8000b6a:	71fb      	strb	r3, [r7, #7]

	switch(pktsts)
 8000b6c:	79fb      	ldrb	r3, [r7, #7]
 8000b6e:	3b02      	subs	r3, #2
 8000b70:	2b04      	cmp	r3, #4
 8000b72:	d829      	bhi.n	8000bc8 <rxflvl_handler+0x90>
 8000b74:	a201      	add	r2, pc, #4	; (adr r2, 8000b7c <rxflvl_handler+0x44>)
 8000b76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b7a:	bf00      	nop
 8000b7c:	08000b91 	.word	0x08000b91
 8000b80:	08000b9f 	.word	0x08000b9f
 8000b84:	08000bb3 	.word	0x08000bb3
 8000b88:	08000bc9 	.word	0x08000bc9
 8000b8c:	08000bc7 	.word	0x08000bc7
	{
	case 0x02:								//OUT data packet received
		usbe.on_setup_packet_received(endpoint_no,bytecnt);
 8000b90:	4b11      	ldr	r3, [pc, #68]	; (8000bd8 <rxflvl_handler+0xa0>)
 8000b92:	685b      	ldr	r3, [r3, #4]
 8000b94:	8939      	ldrh	r1, [r7, #8]
 8000b96:	7afa      	ldrb	r2, [r7, #11]
 8000b98:	4610      	mov	r0, r2
 8000b9a:	4798      	blx	r3
		break;
 8000b9c:	e014      	b.n	8000bc8 <rxflvl_handler+0x90>
	case 0x06 : 							//SETUP packet received

		break;
	case 0x03 : 							//OUT transfer completed
		SET_BIT(OEPNT(endpoint_no)->DOEPCTL,
 8000b9e:	7afb      	ldrb	r3, [r7, #11]
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f7ff fcaa 	bl	80004fa <OEPNT>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	681a      	ldr	r2, [r3, #0]
 8000baa:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8000bae:	601a      	str	r2, [r3, #0]
					USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);    //re-enabling the end point after the core disables it
		break;
 8000bb0:	e00a      	b.n	8000bc8 <rxflvl_handler+0x90>
	case 0x04 : 							//SETUP transfer completed
		SET_BIT(OEPNT(endpoint_no)->DOEPCTL,
 8000bb2:	7afb      	ldrb	r3, [r7, #11]
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f7ff fca0 	bl	80004fa <OEPNT>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	681a      	ldr	r2, [r3, #0]
 8000bbe:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8000bc2:	601a      	str	r2, [r3, #0]
					USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);	  //re-enabling the end point after the core disables it
		break;
 8000bc4:	e000      	b.n	8000bc8 <rxflvl_handler+0x90>
		break;
 8000bc6:	bf00      	nop
	}
}
 8000bc8:	bf00      	nop
 8000bca:	3710      	adds	r7, #16
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	08001e50 	.word	0x08001e50
 8000bd4:	40040000 	.word	0x40040000
 8000bd8:	20000000 	.word	0x20000000

08000bdc <gint_handlers>:
/*
 * @brief : the handlers for any usb related interrupts
 */

static void gint_handlers(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
 volatile uint32_t gint_stat = USB_OTG_HS_GLOBAL->GINTSTS;
 8000be2:	4b1b      	ldr	r3, [pc, #108]	; (8000c50 <gint_handlers+0x74>)
 8000be4:	695b      	ldr	r3, [r3, #20]
 8000be6:	607b      	str	r3, [r7, #4]

 if(gint_stat & USB_OTG_GINTSTS_USBRST)				//usb reset handler
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d008      	beq.n	8000c04 <gint_handlers+0x28>
 {
	 usb_rst_handler();
 8000bf2:	f7ff ff77 	bl	8000ae4 <usb_rst_handler>
	 SET_BIT(USB_OTG_HS_GLOBAL->GINTSTS,USB_OTG_GINTSTS_USBRST);     //clearing the interrupt flag
 8000bf6:	4b16      	ldr	r3, [pc, #88]	; (8000c50 <gint_handlers+0x74>)
 8000bf8:	695b      	ldr	r3, [r3, #20]
 8000bfa:	4a15      	ldr	r2, [pc, #84]	; (8000c50 <gint_handlers+0x74>)
 8000bfc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c00:	6153      	str	r3, [r2, #20]
 else if(gint_stat & USB_OTG_GINTSTS_OEPINT)		//out end point handler
 {


 }
}
 8000c02:	e021      	b.n	8000c48 <gint_handlers+0x6c>
 else if(gint_stat & USB_OTG_GINTSTS_ENUMDNE)		//enumeration done handler
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d008      	beq.n	8000c20 <gint_handlers+0x44>
	 enum_done_handler();
 8000c0e:	f7ff ff87 	bl	8000b20 <enum_done_handler>
	 SET_BIT(USB_OTG_HS_GLOBAL->GINTSTS,USB_OTG_GINTSTS_ENUMDNE);    //clearing the interrupt flag
 8000c12:	4b0f      	ldr	r3, [pc, #60]	; (8000c50 <gint_handlers+0x74>)
 8000c14:	695b      	ldr	r3, [r3, #20]
 8000c16:	4a0e      	ldr	r2, [pc, #56]	; (8000c50 <gint_handlers+0x74>)
 8000c18:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000c1c:	6153      	str	r3, [r2, #20]
}
 8000c1e:	e013      	b.n	8000c48 <gint_handlers+0x6c>
 else if(gint_stat & USB_OTG_GINTSTS_RXFLVL)		//receive fifo empty handler
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	f003 0310 	and.w	r3, r3, #16
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d008      	beq.n	8000c3c <gint_handlers+0x60>
	 rxflvl_handler();
 8000c2a:	f7ff ff85 	bl	8000b38 <rxflvl_handler>
	 SET_BIT(USB_OTG_HS_GLOBAL->GINTSTS,USB_OTG_GINTSTS_RXFLVL);	//clearing the interrupt flag
 8000c2e:	4b08      	ldr	r3, [pc, #32]	; (8000c50 <gint_handlers+0x74>)
 8000c30:	695b      	ldr	r3, [r3, #20]
 8000c32:	4a07      	ldr	r2, [pc, #28]	; (8000c50 <gint_handlers+0x74>)
 8000c34:	f043 0310 	orr.w	r3, r3, #16
 8000c38:	6153      	str	r3, [r2, #20]
}
 8000c3a:	e005      	b.n	8000c48 <gint_handlers+0x6c>
 else if(gint_stat & USB_OTG_GINTSTS_IEPINT)		//in end point handler
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d100      	bne.n	8000c48 <gint_handlers+0x6c>
 else if(gint_stat & USB_OTG_GINTSTS_OEPINT)		//out end point handler
 8000c46:	687b      	ldr	r3, [r7, #4]
}
 8000c48:	bf00      	nop
 8000c4a:	3708      	adds	r7, #8
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	40040000 	.word	0x40040000

08000c54 <usb_init>:
#include "usbFramework.h"

static USBDevice *usbdevice_Handler;

void usb_init(USBDevice *usbdevice)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
	usbdevice_Handler = usbdevice;
 8000c5c:	4a09      	ldr	r2, [pc, #36]	; (8000c84 <usb_init+0x30>)
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	6013      	str	r3, [r2, #0]
	usbdriver.usb_gpio_init();
 8000c62:	4b09      	ldr	r3, [pc, #36]	; (8000c88 <usb_init+0x34>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	4798      	blx	r3
	usbdriver.usb_core_init();
 8000c68:	4b07      	ldr	r3, [pc, #28]	; (8000c88 <usb_init+0x34>)
 8000c6a:	685b      	ldr	r3, [r3, #4]
 8000c6c:	4798      	blx	r3
	usbdriver.device_core_init();
 8000c6e:	4b06      	ldr	r3, [pc, #24]	; (8000c88 <usb_init+0x34>)
 8000c70:	689b      	ldr	r3, [r3, #8]
 8000c72:	4798      	blx	r3
	usbdriver.connect_usb();
 8000c74:	4b04      	ldr	r3, [pc, #16]	; (8000c88 <usb_init+0x34>)
 8000c76:	68db      	ldr	r3, [r3, #12]
 8000c78:	4798      	blx	r3
}
 8000c7a:	bf00      	nop
 8000c7c:	3708      	adds	r7, #8
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	20000098 	.word	0x20000098
 8000c88:	08001e60 	.word	0x08001e60

08000c8c <polling_FW>:

void polling_FW(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
	usbdriver.polling();
 8000c90:	4b02      	ldr	r3, [pc, #8]	; (8000c9c <polling_FW+0x10>)
 8000c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c94:	4798      	blx	r3
}
 8000c96:	bf00      	nop
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	08001e60 	.word	0x08001e60

08000ca0 <usb_rst_handler>:

static void usb_rst_handler(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
	usbdevice_Handler->in_data_size = 0;
 8000ca4:	4b0c      	ldr	r3, [pc, #48]	; (8000cd8 <usb_rst_handler+0x38>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	2200      	movs	r2, #0
 8000caa:	611a      	str	r2, [r3, #16]
	usbdevice_Handler->out_data_size = 0;
 8000cac:	4b0a      	ldr	r3, [pc, #40]	; (8000cd8 <usb_rst_handler+0x38>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	609a      	str	r2, [r3, #8]
	usbdevice_Handler->configuration_value = 0;
 8000cb4:	4b08      	ldr	r3, [pc, #32]	; (8000cd8 <usb_rst_handler+0x38>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	2200      	movs	r2, #0
 8000cba:	709a      	strb	r2, [r3, #2]
	usbdevice_Handler->ds = USB_DS_DEFAULT;
 8000cbc:	4b06      	ldr	r3, [pc, #24]	; (8000cd8 <usb_rst_handler+0x38>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	701a      	strb	r2, [r3, #0]
	usbdevice_Handler->tcs = USB_CS_SETUP;
 8000cc4:	4b04      	ldr	r3, [pc, #16]	; (8000cd8 <usb_rst_handler+0x38>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	2200      	movs	r2, #0
 8000cca:	705a      	strb	r2, [r3, #1]
	usbdriver.setAddress(0);
 8000ccc:	4b03      	ldr	r3, [pc, #12]	; (8000cdc <usb_rst_handler+0x3c>)
 8000cce:	695b      	ldr	r3, [r3, #20]
 8000cd0:	2000      	movs	r0, #0
 8000cd2:	4798      	blx	r3
}
 8000cd4:	bf00      	nop
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	20000098 	.word	0x20000098
 8000cdc:	08001e60 	.word	0x08001e60

08000ce0 <process_request>:

static void process_request(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0

}
 8000ce4:	bf00      	nop
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr
	...

08000cf0 <setup_data_received_handler>:

static void setup_data_received_handler(uint8_t endpoint_no, uint16_t bcnt)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	460a      	mov	r2, r1
 8000cfa:	71fb      	strb	r3, [r7, #7]
 8000cfc:	4613      	mov	r3, r2
 8000cfe:	80bb      	strh	r3, [r7, #4]
	usbdriver.read_Packet(bcnt,usbdevice_Handler->out_buffer);
 8000d00:	4b06      	ldr	r3, [pc, #24]	; (8000d1c <setup_data_received_handler+0x2c>)
 8000d02:	69db      	ldr	r3, [r3, #28]
 8000d04:	4a06      	ldr	r2, [pc, #24]	; (8000d20 <setup_data_received_handler+0x30>)
 8000d06:	6812      	ldr	r2, [r2, #0]
 8000d08:	6851      	ldr	r1, [r2, #4]
 8000d0a:	88ba      	ldrh	r2, [r7, #4]
 8000d0c:	4610      	mov	r0, r2
 8000d0e:	4798      	blx	r3
    process_request();
 8000d10:	f7ff ffe6 	bl	8000ce0 <process_request>
}
 8000d14:	bf00      	nop
 8000d16:	3708      	adds	r7, #8
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	08001e60 	.word	0x08001e60
 8000d20:	20000098 	.word	0x20000098

08000d24 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d24:	480d      	ldr	r0, [pc, #52]	; (8000d5c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d26:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000d28:	f7ff fbd0 	bl	80004cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d2c:	480c      	ldr	r0, [pc, #48]	; (8000d60 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d2e:	490d      	ldr	r1, [pc, #52]	; (8000d64 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d30:	4a0d      	ldr	r2, [pc, #52]	; (8000d68 <LoopForever+0xe>)
  movs r3, #0
 8000d32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d34:	e002      	b.n	8000d3c <LoopCopyDataInit>

08000d36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d3a:	3304      	adds	r3, #4

08000d3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d40:	d3f9      	bcc.n	8000d36 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d42:	4a0a      	ldr	r2, [pc, #40]	; (8000d6c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d44:	4c0a      	ldr	r4, [pc, #40]	; (8000d70 <LoopForever+0x16>)
  movs r3, #0
 8000d46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d48:	e001      	b.n	8000d4e <LoopFillZerobss>

08000d4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d4c:	3204      	adds	r2, #4

08000d4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d50:	d3fb      	bcc.n	8000d4a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000d52:	f000 f811 	bl	8000d78 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d56:	f7ff fb15 	bl	8000384 <main>

08000d5a <LoopForever>:

LoopForever:
    b LoopForever
 8000d5a:	e7fe      	b.n	8000d5a <LoopForever>
  ldr   r0, =_estack
 8000d5c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000d60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d64:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000d68:	08001f30 	.word	0x08001f30
  ldr r2, =_sbss
 8000d6c:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000d70:	200000ec 	.word	0x200000ec

08000d74 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d74:	e7fe      	b.n	8000d74 <ADC_IRQHandler>
	...

08000d78 <__libc_init_array>:
 8000d78:	b570      	push	{r4, r5, r6, lr}
 8000d7a:	4d0d      	ldr	r5, [pc, #52]	; (8000db0 <__libc_init_array+0x38>)
 8000d7c:	4c0d      	ldr	r4, [pc, #52]	; (8000db4 <__libc_init_array+0x3c>)
 8000d7e:	1b64      	subs	r4, r4, r5
 8000d80:	10a4      	asrs	r4, r4, #2
 8000d82:	2600      	movs	r6, #0
 8000d84:	42a6      	cmp	r6, r4
 8000d86:	d109      	bne.n	8000d9c <__libc_init_array+0x24>
 8000d88:	4d0b      	ldr	r5, [pc, #44]	; (8000db8 <__libc_init_array+0x40>)
 8000d8a:	4c0c      	ldr	r4, [pc, #48]	; (8000dbc <__libc_init_array+0x44>)
 8000d8c:	f001 f814 	bl	8001db8 <_init>
 8000d90:	1b64      	subs	r4, r4, r5
 8000d92:	10a4      	asrs	r4, r4, #2
 8000d94:	2600      	movs	r6, #0
 8000d96:	42a6      	cmp	r6, r4
 8000d98:	d105      	bne.n	8000da6 <__libc_init_array+0x2e>
 8000d9a:	bd70      	pop	{r4, r5, r6, pc}
 8000d9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000da0:	4798      	blx	r3
 8000da2:	3601      	adds	r6, #1
 8000da4:	e7ee      	b.n	8000d84 <__libc_init_array+0xc>
 8000da6:	f855 3b04 	ldr.w	r3, [r5], #4
 8000daa:	4798      	blx	r3
 8000dac:	3601      	adds	r6, #1
 8000dae:	e7f2      	b.n	8000d96 <__libc_init_array+0x1e>
 8000db0:	08001f28 	.word	0x08001f28
 8000db4:	08001f28 	.word	0x08001f28
 8000db8:	08001f28 	.word	0x08001f28
 8000dbc:	08001f2c 	.word	0x08001f2c

08000dc0 <memset>:
 8000dc0:	4402      	add	r2, r0
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	4293      	cmp	r3, r2
 8000dc6:	d100      	bne.n	8000dca <memset+0xa>
 8000dc8:	4770      	bx	lr
 8000dca:	f803 1b01 	strb.w	r1, [r3], #1
 8000dce:	e7f9      	b.n	8000dc4 <memset+0x4>

08000dd0 <__sfputc_r>:
 8000dd0:	6893      	ldr	r3, [r2, #8]
 8000dd2:	3b01      	subs	r3, #1
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	b410      	push	{r4}
 8000dd8:	6093      	str	r3, [r2, #8]
 8000dda:	da08      	bge.n	8000dee <__sfputc_r+0x1e>
 8000ddc:	6994      	ldr	r4, [r2, #24]
 8000dde:	42a3      	cmp	r3, r4
 8000de0:	db01      	blt.n	8000de6 <__sfputc_r+0x16>
 8000de2:	290a      	cmp	r1, #10
 8000de4:	d103      	bne.n	8000dee <__sfputc_r+0x1e>
 8000de6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000dea:	f000 bb17 	b.w	800141c <__swbuf_r>
 8000dee:	6813      	ldr	r3, [r2, #0]
 8000df0:	1c58      	adds	r0, r3, #1
 8000df2:	6010      	str	r0, [r2, #0]
 8000df4:	7019      	strb	r1, [r3, #0]
 8000df6:	4608      	mov	r0, r1
 8000df8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000dfc:	4770      	bx	lr

08000dfe <__sfputs_r>:
 8000dfe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e00:	4606      	mov	r6, r0
 8000e02:	460f      	mov	r7, r1
 8000e04:	4614      	mov	r4, r2
 8000e06:	18d5      	adds	r5, r2, r3
 8000e08:	42ac      	cmp	r4, r5
 8000e0a:	d101      	bne.n	8000e10 <__sfputs_r+0x12>
 8000e0c:	2000      	movs	r0, #0
 8000e0e:	e007      	b.n	8000e20 <__sfputs_r+0x22>
 8000e10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000e14:	463a      	mov	r2, r7
 8000e16:	4630      	mov	r0, r6
 8000e18:	f7ff ffda 	bl	8000dd0 <__sfputc_r>
 8000e1c:	1c43      	adds	r3, r0, #1
 8000e1e:	d1f3      	bne.n	8000e08 <__sfputs_r+0xa>
 8000e20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000e24 <_vfiprintf_r>:
 8000e24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000e28:	460d      	mov	r5, r1
 8000e2a:	b09d      	sub	sp, #116	; 0x74
 8000e2c:	4614      	mov	r4, r2
 8000e2e:	4698      	mov	r8, r3
 8000e30:	4606      	mov	r6, r0
 8000e32:	b118      	cbz	r0, 8000e3c <_vfiprintf_r+0x18>
 8000e34:	6983      	ldr	r3, [r0, #24]
 8000e36:	b90b      	cbnz	r3, 8000e3c <_vfiprintf_r+0x18>
 8000e38:	f000 fcca 	bl	80017d0 <__sinit>
 8000e3c:	4b89      	ldr	r3, [pc, #548]	; (8001064 <_vfiprintf_r+0x240>)
 8000e3e:	429d      	cmp	r5, r3
 8000e40:	d11b      	bne.n	8000e7a <_vfiprintf_r+0x56>
 8000e42:	6875      	ldr	r5, [r6, #4]
 8000e44:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000e46:	07d9      	lsls	r1, r3, #31
 8000e48:	d405      	bmi.n	8000e56 <_vfiprintf_r+0x32>
 8000e4a:	89ab      	ldrh	r3, [r5, #12]
 8000e4c:	059a      	lsls	r2, r3, #22
 8000e4e:	d402      	bmi.n	8000e56 <_vfiprintf_r+0x32>
 8000e50:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000e52:	f000 fd5b 	bl	800190c <__retarget_lock_acquire_recursive>
 8000e56:	89ab      	ldrh	r3, [r5, #12]
 8000e58:	071b      	lsls	r3, r3, #28
 8000e5a:	d501      	bpl.n	8000e60 <_vfiprintf_r+0x3c>
 8000e5c:	692b      	ldr	r3, [r5, #16]
 8000e5e:	b9eb      	cbnz	r3, 8000e9c <_vfiprintf_r+0x78>
 8000e60:	4629      	mov	r1, r5
 8000e62:	4630      	mov	r0, r6
 8000e64:	f000 fb2c 	bl	80014c0 <__swsetup_r>
 8000e68:	b1c0      	cbz	r0, 8000e9c <_vfiprintf_r+0x78>
 8000e6a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000e6c:	07dc      	lsls	r4, r3, #31
 8000e6e:	d50e      	bpl.n	8000e8e <_vfiprintf_r+0x6a>
 8000e70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e74:	b01d      	add	sp, #116	; 0x74
 8000e76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000e7a:	4b7b      	ldr	r3, [pc, #492]	; (8001068 <_vfiprintf_r+0x244>)
 8000e7c:	429d      	cmp	r5, r3
 8000e7e:	d101      	bne.n	8000e84 <_vfiprintf_r+0x60>
 8000e80:	68b5      	ldr	r5, [r6, #8]
 8000e82:	e7df      	b.n	8000e44 <_vfiprintf_r+0x20>
 8000e84:	4b79      	ldr	r3, [pc, #484]	; (800106c <_vfiprintf_r+0x248>)
 8000e86:	429d      	cmp	r5, r3
 8000e88:	bf08      	it	eq
 8000e8a:	68f5      	ldreq	r5, [r6, #12]
 8000e8c:	e7da      	b.n	8000e44 <_vfiprintf_r+0x20>
 8000e8e:	89ab      	ldrh	r3, [r5, #12]
 8000e90:	0598      	lsls	r0, r3, #22
 8000e92:	d4ed      	bmi.n	8000e70 <_vfiprintf_r+0x4c>
 8000e94:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000e96:	f000 fd3a 	bl	800190e <__retarget_lock_release_recursive>
 8000e9a:	e7e9      	b.n	8000e70 <_vfiprintf_r+0x4c>
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	9309      	str	r3, [sp, #36]	; 0x24
 8000ea0:	2320      	movs	r3, #32
 8000ea2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000ea6:	f8cd 800c 	str.w	r8, [sp, #12]
 8000eaa:	2330      	movs	r3, #48	; 0x30
 8000eac:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8001070 <_vfiprintf_r+0x24c>
 8000eb0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000eb4:	f04f 0901 	mov.w	r9, #1
 8000eb8:	4623      	mov	r3, r4
 8000eba:	469a      	mov	sl, r3
 8000ebc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000ec0:	b10a      	cbz	r2, 8000ec6 <_vfiprintf_r+0xa2>
 8000ec2:	2a25      	cmp	r2, #37	; 0x25
 8000ec4:	d1f9      	bne.n	8000eba <_vfiprintf_r+0x96>
 8000ec6:	ebba 0b04 	subs.w	fp, sl, r4
 8000eca:	d00b      	beq.n	8000ee4 <_vfiprintf_r+0xc0>
 8000ecc:	465b      	mov	r3, fp
 8000ece:	4622      	mov	r2, r4
 8000ed0:	4629      	mov	r1, r5
 8000ed2:	4630      	mov	r0, r6
 8000ed4:	f7ff ff93 	bl	8000dfe <__sfputs_r>
 8000ed8:	3001      	adds	r0, #1
 8000eda:	f000 80aa 	beq.w	8001032 <_vfiprintf_r+0x20e>
 8000ede:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000ee0:	445a      	add	r2, fp
 8000ee2:	9209      	str	r2, [sp, #36]	; 0x24
 8000ee4:	f89a 3000 	ldrb.w	r3, [sl]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	f000 80a2 	beq.w	8001032 <_vfiprintf_r+0x20e>
 8000eee:	2300      	movs	r3, #0
 8000ef0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ef4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000ef8:	f10a 0a01 	add.w	sl, sl, #1
 8000efc:	9304      	str	r3, [sp, #16]
 8000efe:	9307      	str	r3, [sp, #28]
 8000f00:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000f04:	931a      	str	r3, [sp, #104]	; 0x68
 8000f06:	4654      	mov	r4, sl
 8000f08:	2205      	movs	r2, #5
 8000f0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000f0e:	4858      	ldr	r0, [pc, #352]	; (8001070 <_vfiprintf_r+0x24c>)
 8000f10:	f7ff f96e 	bl	80001f0 <memchr>
 8000f14:	9a04      	ldr	r2, [sp, #16]
 8000f16:	b9d8      	cbnz	r0, 8000f50 <_vfiprintf_r+0x12c>
 8000f18:	06d1      	lsls	r1, r2, #27
 8000f1a:	bf44      	itt	mi
 8000f1c:	2320      	movmi	r3, #32
 8000f1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000f22:	0713      	lsls	r3, r2, #28
 8000f24:	bf44      	itt	mi
 8000f26:	232b      	movmi	r3, #43	; 0x2b
 8000f28:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000f2c:	f89a 3000 	ldrb.w	r3, [sl]
 8000f30:	2b2a      	cmp	r3, #42	; 0x2a
 8000f32:	d015      	beq.n	8000f60 <_vfiprintf_r+0x13c>
 8000f34:	9a07      	ldr	r2, [sp, #28]
 8000f36:	4654      	mov	r4, sl
 8000f38:	2000      	movs	r0, #0
 8000f3a:	f04f 0c0a 	mov.w	ip, #10
 8000f3e:	4621      	mov	r1, r4
 8000f40:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000f44:	3b30      	subs	r3, #48	; 0x30
 8000f46:	2b09      	cmp	r3, #9
 8000f48:	d94e      	bls.n	8000fe8 <_vfiprintf_r+0x1c4>
 8000f4a:	b1b0      	cbz	r0, 8000f7a <_vfiprintf_r+0x156>
 8000f4c:	9207      	str	r2, [sp, #28]
 8000f4e:	e014      	b.n	8000f7a <_vfiprintf_r+0x156>
 8000f50:	eba0 0308 	sub.w	r3, r0, r8
 8000f54:	fa09 f303 	lsl.w	r3, r9, r3
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	9304      	str	r3, [sp, #16]
 8000f5c:	46a2      	mov	sl, r4
 8000f5e:	e7d2      	b.n	8000f06 <_vfiprintf_r+0xe2>
 8000f60:	9b03      	ldr	r3, [sp, #12]
 8000f62:	1d19      	adds	r1, r3, #4
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	9103      	str	r1, [sp, #12]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	bfbb      	ittet	lt
 8000f6c:	425b      	neglt	r3, r3
 8000f6e:	f042 0202 	orrlt.w	r2, r2, #2
 8000f72:	9307      	strge	r3, [sp, #28]
 8000f74:	9307      	strlt	r3, [sp, #28]
 8000f76:	bfb8      	it	lt
 8000f78:	9204      	strlt	r2, [sp, #16]
 8000f7a:	7823      	ldrb	r3, [r4, #0]
 8000f7c:	2b2e      	cmp	r3, #46	; 0x2e
 8000f7e:	d10c      	bne.n	8000f9a <_vfiprintf_r+0x176>
 8000f80:	7863      	ldrb	r3, [r4, #1]
 8000f82:	2b2a      	cmp	r3, #42	; 0x2a
 8000f84:	d135      	bne.n	8000ff2 <_vfiprintf_r+0x1ce>
 8000f86:	9b03      	ldr	r3, [sp, #12]
 8000f88:	1d1a      	adds	r2, r3, #4
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	9203      	str	r2, [sp, #12]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	bfb8      	it	lt
 8000f92:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8000f96:	3402      	adds	r4, #2
 8000f98:	9305      	str	r3, [sp, #20]
 8000f9a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8001080 <_vfiprintf_r+0x25c>
 8000f9e:	7821      	ldrb	r1, [r4, #0]
 8000fa0:	2203      	movs	r2, #3
 8000fa2:	4650      	mov	r0, sl
 8000fa4:	f7ff f924 	bl	80001f0 <memchr>
 8000fa8:	b140      	cbz	r0, 8000fbc <_vfiprintf_r+0x198>
 8000faa:	2340      	movs	r3, #64	; 0x40
 8000fac:	eba0 000a 	sub.w	r0, r0, sl
 8000fb0:	fa03 f000 	lsl.w	r0, r3, r0
 8000fb4:	9b04      	ldr	r3, [sp, #16]
 8000fb6:	4303      	orrs	r3, r0
 8000fb8:	3401      	adds	r4, #1
 8000fba:	9304      	str	r3, [sp, #16]
 8000fbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000fc0:	482c      	ldr	r0, [pc, #176]	; (8001074 <_vfiprintf_r+0x250>)
 8000fc2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000fc6:	2206      	movs	r2, #6
 8000fc8:	f7ff f912 	bl	80001f0 <memchr>
 8000fcc:	2800      	cmp	r0, #0
 8000fce:	d03f      	beq.n	8001050 <_vfiprintf_r+0x22c>
 8000fd0:	4b29      	ldr	r3, [pc, #164]	; (8001078 <_vfiprintf_r+0x254>)
 8000fd2:	bb1b      	cbnz	r3, 800101c <_vfiprintf_r+0x1f8>
 8000fd4:	9b03      	ldr	r3, [sp, #12]
 8000fd6:	3307      	adds	r3, #7
 8000fd8:	f023 0307 	bic.w	r3, r3, #7
 8000fdc:	3308      	adds	r3, #8
 8000fde:	9303      	str	r3, [sp, #12]
 8000fe0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000fe2:	443b      	add	r3, r7
 8000fe4:	9309      	str	r3, [sp, #36]	; 0x24
 8000fe6:	e767      	b.n	8000eb8 <_vfiprintf_r+0x94>
 8000fe8:	fb0c 3202 	mla	r2, ip, r2, r3
 8000fec:	460c      	mov	r4, r1
 8000fee:	2001      	movs	r0, #1
 8000ff0:	e7a5      	b.n	8000f3e <_vfiprintf_r+0x11a>
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	3401      	adds	r4, #1
 8000ff6:	9305      	str	r3, [sp, #20]
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	f04f 0c0a 	mov.w	ip, #10
 8000ffe:	4620      	mov	r0, r4
 8001000:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001004:	3a30      	subs	r2, #48	; 0x30
 8001006:	2a09      	cmp	r2, #9
 8001008:	d903      	bls.n	8001012 <_vfiprintf_r+0x1ee>
 800100a:	2b00      	cmp	r3, #0
 800100c:	d0c5      	beq.n	8000f9a <_vfiprintf_r+0x176>
 800100e:	9105      	str	r1, [sp, #20]
 8001010:	e7c3      	b.n	8000f9a <_vfiprintf_r+0x176>
 8001012:	fb0c 2101 	mla	r1, ip, r1, r2
 8001016:	4604      	mov	r4, r0
 8001018:	2301      	movs	r3, #1
 800101a:	e7f0      	b.n	8000ffe <_vfiprintf_r+0x1da>
 800101c:	ab03      	add	r3, sp, #12
 800101e:	9300      	str	r3, [sp, #0]
 8001020:	462a      	mov	r2, r5
 8001022:	4b16      	ldr	r3, [pc, #88]	; (800107c <_vfiprintf_r+0x258>)
 8001024:	a904      	add	r1, sp, #16
 8001026:	4630      	mov	r0, r6
 8001028:	f3af 8000 	nop.w
 800102c:	4607      	mov	r7, r0
 800102e:	1c78      	adds	r0, r7, #1
 8001030:	d1d6      	bne.n	8000fe0 <_vfiprintf_r+0x1bc>
 8001032:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001034:	07d9      	lsls	r1, r3, #31
 8001036:	d405      	bmi.n	8001044 <_vfiprintf_r+0x220>
 8001038:	89ab      	ldrh	r3, [r5, #12]
 800103a:	059a      	lsls	r2, r3, #22
 800103c:	d402      	bmi.n	8001044 <_vfiprintf_r+0x220>
 800103e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001040:	f000 fc65 	bl	800190e <__retarget_lock_release_recursive>
 8001044:	89ab      	ldrh	r3, [r5, #12]
 8001046:	065b      	lsls	r3, r3, #25
 8001048:	f53f af12 	bmi.w	8000e70 <_vfiprintf_r+0x4c>
 800104c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800104e:	e711      	b.n	8000e74 <_vfiprintf_r+0x50>
 8001050:	ab03      	add	r3, sp, #12
 8001052:	9300      	str	r3, [sp, #0]
 8001054:	462a      	mov	r2, r5
 8001056:	4b09      	ldr	r3, [pc, #36]	; (800107c <_vfiprintf_r+0x258>)
 8001058:	a904      	add	r1, sp, #16
 800105a:	4630      	mov	r0, r6
 800105c:	f000 f88a 	bl	8001174 <_printf_i>
 8001060:	e7e4      	b.n	800102c <_vfiprintf_r+0x208>
 8001062:	bf00      	nop
 8001064:	08001ee8 	.word	0x08001ee8
 8001068:	08001f08 	.word	0x08001f08
 800106c:	08001ec8 	.word	0x08001ec8
 8001070:	08001e94 	.word	0x08001e94
 8001074:	08001e9e 	.word	0x08001e9e
 8001078:	00000000 	.word	0x00000000
 800107c:	08000dff 	.word	0x08000dff
 8001080:	08001e9a 	.word	0x08001e9a

08001084 <vfiprintf>:
 8001084:	4613      	mov	r3, r2
 8001086:	460a      	mov	r2, r1
 8001088:	4601      	mov	r1, r0
 800108a:	4802      	ldr	r0, [pc, #8]	; (8001094 <vfiprintf+0x10>)
 800108c:	6800      	ldr	r0, [r0, #0]
 800108e:	f7ff bec9 	b.w	8000e24 <_vfiprintf_r>
 8001092:	bf00      	nop
 8001094:	20000018 	.word	0x20000018

08001098 <_printf_common>:
 8001098:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800109c:	4616      	mov	r6, r2
 800109e:	4699      	mov	r9, r3
 80010a0:	688a      	ldr	r2, [r1, #8]
 80010a2:	690b      	ldr	r3, [r1, #16]
 80010a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80010a8:	4293      	cmp	r3, r2
 80010aa:	bfb8      	it	lt
 80010ac:	4613      	movlt	r3, r2
 80010ae:	6033      	str	r3, [r6, #0]
 80010b0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80010b4:	4607      	mov	r7, r0
 80010b6:	460c      	mov	r4, r1
 80010b8:	b10a      	cbz	r2, 80010be <_printf_common+0x26>
 80010ba:	3301      	adds	r3, #1
 80010bc:	6033      	str	r3, [r6, #0]
 80010be:	6823      	ldr	r3, [r4, #0]
 80010c0:	0699      	lsls	r1, r3, #26
 80010c2:	bf42      	ittt	mi
 80010c4:	6833      	ldrmi	r3, [r6, #0]
 80010c6:	3302      	addmi	r3, #2
 80010c8:	6033      	strmi	r3, [r6, #0]
 80010ca:	6825      	ldr	r5, [r4, #0]
 80010cc:	f015 0506 	ands.w	r5, r5, #6
 80010d0:	d106      	bne.n	80010e0 <_printf_common+0x48>
 80010d2:	f104 0a19 	add.w	sl, r4, #25
 80010d6:	68e3      	ldr	r3, [r4, #12]
 80010d8:	6832      	ldr	r2, [r6, #0]
 80010da:	1a9b      	subs	r3, r3, r2
 80010dc:	42ab      	cmp	r3, r5
 80010de:	dc26      	bgt.n	800112e <_printf_common+0x96>
 80010e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80010e4:	1e13      	subs	r3, r2, #0
 80010e6:	6822      	ldr	r2, [r4, #0]
 80010e8:	bf18      	it	ne
 80010ea:	2301      	movne	r3, #1
 80010ec:	0692      	lsls	r2, r2, #26
 80010ee:	d42b      	bmi.n	8001148 <_printf_common+0xb0>
 80010f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80010f4:	4649      	mov	r1, r9
 80010f6:	4638      	mov	r0, r7
 80010f8:	47c0      	blx	r8
 80010fa:	3001      	adds	r0, #1
 80010fc:	d01e      	beq.n	800113c <_printf_common+0xa4>
 80010fe:	6823      	ldr	r3, [r4, #0]
 8001100:	68e5      	ldr	r5, [r4, #12]
 8001102:	6832      	ldr	r2, [r6, #0]
 8001104:	f003 0306 	and.w	r3, r3, #6
 8001108:	2b04      	cmp	r3, #4
 800110a:	bf08      	it	eq
 800110c:	1aad      	subeq	r5, r5, r2
 800110e:	68a3      	ldr	r3, [r4, #8]
 8001110:	6922      	ldr	r2, [r4, #16]
 8001112:	bf0c      	ite	eq
 8001114:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001118:	2500      	movne	r5, #0
 800111a:	4293      	cmp	r3, r2
 800111c:	bfc4      	itt	gt
 800111e:	1a9b      	subgt	r3, r3, r2
 8001120:	18ed      	addgt	r5, r5, r3
 8001122:	2600      	movs	r6, #0
 8001124:	341a      	adds	r4, #26
 8001126:	42b5      	cmp	r5, r6
 8001128:	d11a      	bne.n	8001160 <_printf_common+0xc8>
 800112a:	2000      	movs	r0, #0
 800112c:	e008      	b.n	8001140 <_printf_common+0xa8>
 800112e:	2301      	movs	r3, #1
 8001130:	4652      	mov	r2, sl
 8001132:	4649      	mov	r1, r9
 8001134:	4638      	mov	r0, r7
 8001136:	47c0      	blx	r8
 8001138:	3001      	adds	r0, #1
 800113a:	d103      	bne.n	8001144 <_printf_common+0xac>
 800113c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001140:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001144:	3501      	adds	r5, #1
 8001146:	e7c6      	b.n	80010d6 <_printf_common+0x3e>
 8001148:	18e1      	adds	r1, r4, r3
 800114a:	1c5a      	adds	r2, r3, #1
 800114c:	2030      	movs	r0, #48	; 0x30
 800114e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001152:	4422      	add	r2, r4
 8001154:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001158:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800115c:	3302      	adds	r3, #2
 800115e:	e7c7      	b.n	80010f0 <_printf_common+0x58>
 8001160:	2301      	movs	r3, #1
 8001162:	4622      	mov	r2, r4
 8001164:	4649      	mov	r1, r9
 8001166:	4638      	mov	r0, r7
 8001168:	47c0      	blx	r8
 800116a:	3001      	adds	r0, #1
 800116c:	d0e6      	beq.n	800113c <_printf_common+0xa4>
 800116e:	3601      	adds	r6, #1
 8001170:	e7d9      	b.n	8001126 <_printf_common+0x8e>
	...

08001174 <_printf_i>:
 8001174:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001178:	460c      	mov	r4, r1
 800117a:	4691      	mov	r9, r2
 800117c:	7e27      	ldrb	r7, [r4, #24]
 800117e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8001180:	2f78      	cmp	r7, #120	; 0x78
 8001182:	4680      	mov	r8, r0
 8001184:	469a      	mov	sl, r3
 8001186:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800118a:	d807      	bhi.n	800119c <_printf_i+0x28>
 800118c:	2f62      	cmp	r7, #98	; 0x62
 800118e:	d80a      	bhi.n	80011a6 <_printf_i+0x32>
 8001190:	2f00      	cmp	r7, #0
 8001192:	f000 80d8 	beq.w	8001346 <_printf_i+0x1d2>
 8001196:	2f58      	cmp	r7, #88	; 0x58
 8001198:	f000 80a3 	beq.w	80012e2 <_printf_i+0x16e>
 800119c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80011a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80011a4:	e03a      	b.n	800121c <_printf_i+0xa8>
 80011a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80011aa:	2b15      	cmp	r3, #21
 80011ac:	d8f6      	bhi.n	800119c <_printf_i+0x28>
 80011ae:	a001      	add	r0, pc, #4	; (adr r0, 80011b4 <_printf_i+0x40>)
 80011b0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80011b4:	0800120d 	.word	0x0800120d
 80011b8:	08001221 	.word	0x08001221
 80011bc:	0800119d 	.word	0x0800119d
 80011c0:	0800119d 	.word	0x0800119d
 80011c4:	0800119d 	.word	0x0800119d
 80011c8:	0800119d 	.word	0x0800119d
 80011cc:	08001221 	.word	0x08001221
 80011d0:	0800119d 	.word	0x0800119d
 80011d4:	0800119d 	.word	0x0800119d
 80011d8:	0800119d 	.word	0x0800119d
 80011dc:	0800119d 	.word	0x0800119d
 80011e0:	0800132d 	.word	0x0800132d
 80011e4:	08001251 	.word	0x08001251
 80011e8:	0800130f 	.word	0x0800130f
 80011ec:	0800119d 	.word	0x0800119d
 80011f0:	0800119d 	.word	0x0800119d
 80011f4:	0800134f 	.word	0x0800134f
 80011f8:	0800119d 	.word	0x0800119d
 80011fc:	08001251 	.word	0x08001251
 8001200:	0800119d 	.word	0x0800119d
 8001204:	0800119d 	.word	0x0800119d
 8001208:	08001317 	.word	0x08001317
 800120c:	680b      	ldr	r3, [r1, #0]
 800120e:	1d1a      	adds	r2, r3, #4
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	600a      	str	r2, [r1, #0]
 8001214:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8001218:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800121c:	2301      	movs	r3, #1
 800121e:	e0a3      	b.n	8001368 <_printf_i+0x1f4>
 8001220:	6825      	ldr	r5, [r4, #0]
 8001222:	6808      	ldr	r0, [r1, #0]
 8001224:	062e      	lsls	r6, r5, #24
 8001226:	f100 0304 	add.w	r3, r0, #4
 800122a:	d50a      	bpl.n	8001242 <_printf_i+0xce>
 800122c:	6805      	ldr	r5, [r0, #0]
 800122e:	600b      	str	r3, [r1, #0]
 8001230:	2d00      	cmp	r5, #0
 8001232:	da03      	bge.n	800123c <_printf_i+0xc8>
 8001234:	232d      	movs	r3, #45	; 0x2d
 8001236:	426d      	negs	r5, r5
 8001238:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800123c:	485e      	ldr	r0, [pc, #376]	; (80013b8 <_printf_i+0x244>)
 800123e:	230a      	movs	r3, #10
 8001240:	e019      	b.n	8001276 <_printf_i+0x102>
 8001242:	f015 0f40 	tst.w	r5, #64	; 0x40
 8001246:	6805      	ldr	r5, [r0, #0]
 8001248:	600b      	str	r3, [r1, #0]
 800124a:	bf18      	it	ne
 800124c:	b22d      	sxthne	r5, r5
 800124e:	e7ef      	b.n	8001230 <_printf_i+0xbc>
 8001250:	680b      	ldr	r3, [r1, #0]
 8001252:	6825      	ldr	r5, [r4, #0]
 8001254:	1d18      	adds	r0, r3, #4
 8001256:	6008      	str	r0, [r1, #0]
 8001258:	0628      	lsls	r0, r5, #24
 800125a:	d501      	bpl.n	8001260 <_printf_i+0xec>
 800125c:	681d      	ldr	r5, [r3, #0]
 800125e:	e002      	b.n	8001266 <_printf_i+0xf2>
 8001260:	0669      	lsls	r1, r5, #25
 8001262:	d5fb      	bpl.n	800125c <_printf_i+0xe8>
 8001264:	881d      	ldrh	r5, [r3, #0]
 8001266:	4854      	ldr	r0, [pc, #336]	; (80013b8 <_printf_i+0x244>)
 8001268:	2f6f      	cmp	r7, #111	; 0x6f
 800126a:	bf0c      	ite	eq
 800126c:	2308      	moveq	r3, #8
 800126e:	230a      	movne	r3, #10
 8001270:	2100      	movs	r1, #0
 8001272:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001276:	6866      	ldr	r6, [r4, #4]
 8001278:	60a6      	str	r6, [r4, #8]
 800127a:	2e00      	cmp	r6, #0
 800127c:	bfa2      	ittt	ge
 800127e:	6821      	ldrge	r1, [r4, #0]
 8001280:	f021 0104 	bicge.w	r1, r1, #4
 8001284:	6021      	strge	r1, [r4, #0]
 8001286:	b90d      	cbnz	r5, 800128c <_printf_i+0x118>
 8001288:	2e00      	cmp	r6, #0
 800128a:	d04d      	beq.n	8001328 <_printf_i+0x1b4>
 800128c:	4616      	mov	r6, r2
 800128e:	fbb5 f1f3 	udiv	r1, r5, r3
 8001292:	fb03 5711 	mls	r7, r3, r1, r5
 8001296:	5dc7      	ldrb	r7, [r0, r7]
 8001298:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800129c:	462f      	mov	r7, r5
 800129e:	42bb      	cmp	r3, r7
 80012a0:	460d      	mov	r5, r1
 80012a2:	d9f4      	bls.n	800128e <_printf_i+0x11a>
 80012a4:	2b08      	cmp	r3, #8
 80012a6:	d10b      	bne.n	80012c0 <_printf_i+0x14c>
 80012a8:	6823      	ldr	r3, [r4, #0]
 80012aa:	07df      	lsls	r7, r3, #31
 80012ac:	d508      	bpl.n	80012c0 <_printf_i+0x14c>
 80012ae:	6923      	ldr	r3, [r4, #16]
 80012b0:	6861      	ldr	r1, [r4, #4]
 80012b2:	4299      	cmp	r1, r3
 80012b4:	bfde      	ittt	le
 80012b6:	2330      	movle	r3, #48	; 0x30
 80012b8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80012bc:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 80012c0:	1b92      	subs	r2, r2, r6
 80012c2:	6122      	str	r2, [r4, #16]
 80012c4:	f8cd a000 	str.w	sl, [sp]
 80012c8:	464b      	mov	r3, r9
 80012ca:	aa03      	add	r2, sp, #12
 80012cc:	4621      	mov	r1, r4
 80012ce:	4640      	mov	r0, r8
 80012d0:	f7ff fee2 	bl	8001098 <_printf_common>
 80012d4:	3001      	adds	r0, #1
 80012d6:	d14c      	bne.n	8001372 <_printf_i+0x1fe>
 80012d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80012dc:	b004      	add	sp, #16
 80012de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80012e2:	4835      	ldr	r0, [pc, #212]	; (80013b8 <_printf_i+0x244>)
 80012e4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80012e8:	6823      	ldr	r3, [r4, #0]
 80012ea:	680e      	ldr	r6, [r1, #0]
 80012ec:	061f      	lsls	r7, r3, #24
 80012ee:	f856 5b04 	ldr.w	r5, [r6], #4
 80012f2:	600e      	str	r6, [r1, #0]
 80012f4:	d514      	bpl.n	8001320 <_printf_i+0x1ac>
 80012f6:	07d9      	lsls	r1, r3, #31
 80012f8:	bf44      	itt	mi
 80012fa:	f043 0320 	orrmi.w	r3, r3, #32
 80012fe:	6023      	strmi	r3, [r4, #0]
 8001300:	b91d      	cbnz	r5, 800130a <_printf_i+0x196>
 8001302:	6823      	ldr	r3, [r4, #0]
 8001304:	f023 0320 	bic.w	r3, r3, #32
 8001308:	6023      	str	r3, [r4, #0]
 800130a:	2310      	movs	r3, #16
 800130c:	e7b0      	b.n	8001270 <_printf_i+0xfc>
 800130e:	6823      	ldr	r3, [r4, #0]
 8001310:	f043 0320 	orr.w	r3, r3, #32
 8001314:	6023      	str	r3, [r4, #0]
 8001316:	2378      	movs	r3, #120	; 0x78
 8001318:	4828      	ldr	r0, [pc, #160]	; (80013bc <_printf_i+0x248>)
 800131a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800131e:	e7e3      	b.n	80012e8 <_printf_i+0x174>
 8001320:	065e      	lsls	r6, r3, #25
 8001322:	bf48      	it	mi
 8001324:	b2ad      	uxthmi	r5, r5
 8001326:	e7e6      	b.n	80012f6 <_printf_i+0x182>
 8001328:	4616      	mov	r6, r2
 800132a:	e7bb      	b.n	80012a4 <_printf_i+0x130>
 800132c:	680b      	ldr	r3, [r1, #0]
 800132e:	6826      	ldr	r6, [r4, #0]
 8001330:	6960      	ldr	r0, [r4, #20]
 8001332:	1d1d      	adds	r5, r3, #4
 8001334:	600d      	str	r5, [r1, #0]
 8001336:	0635      	lsls	r5, r6, #24
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	d501      	bpl.n	8001340 <_printf_i+0x1cc>
 800133c:	6018      	str	r0, [r3, #0]
 800133e:	e002      	b.n	8001346 <_printf_i+0x1d2>
 8001340:	0671      	lsls	r1, r6, #25
 8001342:	d5fb      	bpl.n	800133c <_printf_i+0x1c8>
 8001344:	8018      	strh	r0, [r3, #0]
 8001346:	2300      	movs	r3, #0
 8001348:	6123      	str	r3, [r4, #16]
 800134a:	4616      	mov	r6, r2
 800134c:	e7ba      	b.n	80012c4 <_printf_i+0x150>
 800134e:	680b      	ldr	r3, [r1, #0]
 8001350:	1d1a      	adds	r2, r3, #4
 8001352:	600a      	str	r2, [r1, #0]
 8001354:	681e      	ldr	r6, [r3, #0]
 8001356:	6862      	ldr	r2, [r4, #4]
 8001358:	2100      	movs	r1, #0
 800135a:	4630      	mov	r0, r6
 800135c:	f7fe ff48 	bl	80001f0 <memchr>
 8001360:	b108      	cbz	r0, 8001366 <_printf_i+0x1f2>
 8001362:	1b80      	subs	r0, r0, r6
 8001364:	6060      	str	r0, [r4, #4]
 8001366:	6863      	ldr	r3, [r4, #4]
 8001368:	6123      	str	r3, [r4, #16]
 800136a:	2300      	movs	r3, #0
 800136c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001370:	e7a8      	b.n	80012c4 <_printf_i+0x150>
 8001372:	6923      	ldr	r3, [r4, #16]
 8001374:	4632      	mov	r2, r6
 8001376:	4649      	mov	r1, r9
 8001378:	4640      	mov	r0, r8
 800137a:	47d0      	blx	sl
 800137c:	3001      	adds	r0, #1
 800137e:	d0ab      	beq.n	80012d8 <_printf_i+0x164>
 8001380:	6823      	ldr	r3, [r4, #0]
 8001382:	079b      	lsls	r3, r3, #30
 8001384:	d413      	bmi.n	80013ae <_printf_i+0x23a>
 8001386:	68e0      	ldr	r0, [r4, #12]
 8001388:	9b03      	ldr	r3, [sp, #12]
 800138a:	4298      	cmp	r0, r3
 800138c:	bfb8      	it	lt
 800138e:	4618      	movlt	r0, r3
 8001390:	e7a4      	b.n	80012dc <_printf_i+0x168>
 8001392:	2301      	movs	r3, #1
 8001394:	4632      	mov	r2, r6
 8001396:	4649      	mov	r1, r9
 8001398:	4640      	mov	r0, r8
 800139a:	47d0      	blx	sl
 800139c:	3001      	adds	r0, #1
 800139e:	d09b      	beq.n	80012d8 <_printf_i+0x164>
 80013a0:	3501      	adds	r5, #1
 80013a2:	68e3      	ldr	r3, [r4, #12]
 80013a4:	9903      	ldr	r1, [sp, #12]
 80013a6:	1a5b      	subs	r3, r3, r1
 80013a8:	42ab      	cmp	r3, r5
 80013aa:	dcf2      	bgt.n	8001392 <_printf_i+0x21e>
 80013ac:	e7eb      	b.n	8001386 <_printf_i+0x212>
 80013ae:	2500      	movs	r5, #0
 80013b0:	f104 0619 	add.w	r6, r4, #25
 80013b4:	e7f5      	b.n	80013a2 <_printf_i+0x22e>
 80013b6:	bf00      	nop
 80013b8:	08001ea5 	.word	0x08001ea5
 80013bc:	08001eb6 	.word	0x08001eb6

080013c0 <iprintf>:
 80013c0:	b40f      	push	{r0, r1, r2, r3}
 80013c2:	4b0a      	ldr	r3, [pc, #40]	; (80013ec <iprintf+0x2c>)
 80013c4:	b513      	push	{r0, r1, r4, lr}
 80013c6:	681c      	ldr	r4, [r3, #0]
 80013c8:	b124      	cbz	r4, 80013d4 <iprintf+0x14>
 80013ca:	69a3      	ldr	r3, [r4, #24]
 80013cc:	b913      	cbnz	r3, 80013d4 <iprintf+0x14>
 80013ce:	4620      	mov	r0, r4
 80013d0:	f000 f9fe 	bl	80017d0 <__sinit>
 80013d4:	ab05      	add	r3, sp, #20
 80013d6:	9a04      	ldr	r2, [sp, #16]
 80013d8:	68a1      	ldr	r1, [r4, #8]
 80013da:	9301      	str	r3, [sp, #4]
 80013dc:	4620      	mov	r0, r4
 80013de:	f7ff fd21 	bl	8000e24 <_vfiprintf_r>
 80013e2:	b002      	add	sp, #8
 80013e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80013e8:	b004      	add	sp, #16
 80013ea:	4770      	bx	lr
 80013ec:	20000018 	.word	0x20000018

080013f0 <putchar>:
 80013f0:	4b09      	ldr	r3, [pc, #36]	; (8001418 <putchar+0x28>)
 80013f2:	b513      	push	{r0, r1, r4, lr}
 80013f4:	681c      	ldr	r4, [r3, #0]
 80013f6:	4601      	mov	r1, r0
 80013f8:	b134      	cbz	r4, 8001408 <putchar+0x18>
 80013fa:	69a3      	ldr	r3, [r4, #24]
 80013fc:	b923      	cbnz	r3, 8001408 <putchar+0x18>
 80013fe:	9001      	str	r0, [sp, #4]
 8001400:	4620      	mov	r0, r4
 8001402:	f000 f9e5 	bl	80017d0 <__sinit>
 8001406:	9901      	ldr	r1, [sp, #4]
 8001408:	68a2      	ldr	r2, [r4, #8]
 800140a:	4620      	mov	r0, r4
 800140c:	b002      	add	sp, #8
 800140e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001412:	f000 bb8b 	b.w	8001b2c <_putc_r>
 8001416:	bf00      	nop
 8001418:	20000018 	.word	0x20000018

0800141c <__swbuf_r>:
 800141c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800141e:	460e      	mov	r6, r1
 8001420:	4614      	mov	r4, r2
 8001422:	4605      	mov	r5, r0
 8001424:	b118      	cbz	r0, 800142e <__swbuf_r+0x12>
 8001426:	6983      	ldr	r3, [r0, #24]
 8001428:	b90b      	cbnz	r3, 800142e <__swbuf_r+0x12>
 800142a:	f000 f9d1 	bl	80017d0 <__sinit>
 800142e:	4b21      	ldr	r3, [pc, #132]	; (80014b4 <__swbuf_r+0x98>)
 8001430:	429c      	cmp	r4, r3
 8001432:	d12b      	bne.n	800148c <__swbuf_r+0x70>
 8001434:	686c      	ldr	r4, [r5, #4]
 8001436:	69a3      	ldr	r3, [r4, #24]
 8001438:	60a3      	str	r3, [r4, #8]
 800143a:	89a3      	ldrh	r3, [r4, #12]
 800143c:	071a      	lsls	r2, r3, #28
 800143e:	d52f      	bpl.n	80014a0 <__swbuf_r+0x84>
 8001440:	6923      	ldr	r3, [r4, #16]
 8001442:	b36b      	cbz	r3, 80014a0 <__swbuf_r+0x84>
 8001444:	6923      	ldr	r3, [r4, #16]
 8001446:	6820      	ldr	r0, [r4, #0]
 8001448:	1ac0      	subs	r0, r0, r3
 800144a:	6963      	ldr	r3, [r4, #20]
 800144c:	b2f6      	uxtb	r6, r6
 800144e:	4283      	cmp	r3, r0
 8001450:	4637      	mov	r7, r6
 8001452:	dc04      	bgt.n	800145e <__swbuf_r+0x42>
 8001454:	4621      	mov	r1, r4
 8001456:	4628      	mov	r0, r5
 8001458:	f000 f926 	bl	80016a8 <_fflush_r>
 800145c:	bb30      	cbnz	r0, 80014ac <__swbuf_r+0x90>
 800145e:	68a3      	ldr	r3, [r4, #8]
 8001460:	3b01      	subs	r3, #1
 8001462:	60a3      	str	r3, [r4, #8]
 8001464:	6823      	ldr	r3, [r4, #0]
 8001466:	1c5a      	adds	r2, r3, #1
 8001468:	6022      	str	r2, [r4, #0]
 800146a:	701e      	strb	r6, [r3, #0]
 800146c:	6963      	ldr	r3, [r4, #20]
 800146e:	3001      	adds	r0, #1
 8001470:	4283      	cmp	r3, r0
 8001472:	d004      	beq.n	800147e <__swbuf_r+0x62>
 8001474:	89a3      	ldrh	r3, [r4, #12]
 8001476:	07db      	lsls	r3, r3, #31
 8001478:	d506      	bpl.n	8001488 <__swbuf_r+0x6c>
 800147a:	2e0a      	cmp	r6, #10
 800147c:	d104      	bne.n	8001488 <__swbuf_r+0x6c>
 800147e:	4621      	mov	r1, r4
 8001480:	4628      	mov	r0, r5
 8001482:	f000 f911 	bl	80016a8 <_fflush_r>
 8001486:	b988      	cbnz	r0, 80014ac <__swbuf_r+0x90>
 8001488:	4638      	mov	r0, r7
 800148a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800148c:	4b0a      	ldr	r3, [pc, #40]	; (80014b8 <__swbuf_r+0x9c>)
 800148e:	429c      	cmp	r4, r3
 8001490:	d101      	bne.n	8001496 <__swbuf_r+0x7a>
 8001492:	68ac      	ldr	r4, [r5, #8]
 8001494:	e7cf      	b.n	8001436 <__swbuf_r+0x1a>
 8001496:	4b09      	ldr	r3, [pc, #36]	; (80014bc <__swbuf_r+0xa0>)
 8001498:	429c      	cmp	r4, r3
 800149a:	bf08      	it	eq
 800149c:	68ec      	ldreq	r4, [r5, #12]
 800149e:	e7ca      	b.n	8001436 <__swbuf_r+0x1a>
 80014a0:	4621      	mov	r1, r4
 80014a2:	4628      	mov	r0, r5
 80014a4:	f000 f80c 	bl	80014c0 <__swsetup_r>
 80014a8:	2800      	cmp	r0, #0
 80014aa:	d0cb      	beq.n	8001444 <__swbuf_r+0x28>
 80014ac:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80014b0:	e7ea      	b.n	8001488 <__swbuf_r+0x6c>
 80014b2:	bf00      	nop
 80014b4:	08001ee8 	.word	0x08001ee8
 80014b8:	08001f08 	.word	0x08001f08
 80014bc:	08001ec8 	.word	0x08001ec8

080014c0 <__swsetup_r>:
 80014c0:	4b32      	ldr	r3, [pc, #200]	; (800158c <__swsetup_r+0xcc>)
 80014c2:	b570      	push	{r4, r5, r6, lr}
 80014c4:	681d      	ldr	r5, [r3, #0]
 80014c6:	4606      	mov	r6, r0
 80014c8:	460c      	mov	r4, r1
 80014ca:	b125      	cbz	r5, 80014d6 <__swsetup_r+0x16>
 80014cc:	69ab      	ldr	r3, [r5, #24]
 80014ce:	b913      	cbnz	r3, 80014d6 <__swsetup_r+0x16>
 80014d0:	4628      	mov	r0, r5
 80014d2:	f000 f97d 	bl	80017d0 <__sinit>
 80014d6:	4b2e      	ldr	r3, [pc, #184]	; (8001590 <__swsetup_r+0xd0>)
 80014d8:	429c      	cmp	r4, r3
 80014da:	d10f      	bne.n	80014fc <__swsetup_r+0x3c>
 80014dc:	686c      	ldr	r4, [r5, #4]
 80014de:	89a3      	ldrh	r3, [r4, #12]
 80014e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80014e4:	0719      	lsls	r1, r3, #28
 80014e6:	d42c      	bmi.n	8001542 <__swsetup_r+0x82>
 80014e8:	06dd      	lsls	r5, r3, #27
 80014ea:	d411      	bmi.n	8001510 <__swsetup_r+0x50>
 80014ec:	2309      	movs	r3, #9
 80014ee:	6033      	str	r3, [r6, #0]
 80014f0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80014f4:	81a3      	strh	r3, [r4, #12]
 80014f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80014fa:	e03e      	b.n	800157a <__swsetup_r+0xba>
 80014fc:	4b25      	ldr	r3, [pc, #148]	; (8001594 <__swsetup_r+0xd4>)
 80014fe:	429c      	cmp	r4, r3
 8001500:	d101      	bne.n	8001506 <__swsetup_r+0x46>
 8001502:	68ac      	ldr	r4, [r5, #8]
 8001504:	e7eb      	b.n	80014de <__swsetup_r+0x1e>
 8001506:	4b24      	ldr	r3, [pc, #144]	; (8001598 <__swsetup_r+0xd8>)
 8001508:	429c      	cmp	r4, r3
 800150a:	bf08      	it	eq
 800150c:	68ec      	ldreq	r4, [r5, #12]
 800150e:	e7e6      	b.n	80014de <__swsetup_r+0x1e>
 8001510:	0758      	lsls	r0, r3, #29
 8001512:	d512      	bpl.n	800153a <__swsetup_r+0x7a>
 8001514:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001516:	b141      	cbz	r1, 800152a <__swsetup_r+0x6a>
 8001518:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800151c:	4299      	cmp	r1, r3
 800151e:	d002      	beq.n	8001526 <__swsetup_r+0x66>
 8001520:	4630      	mov	r0, r6
 8001522:	f000 fa59 	bl	80019d8 <_free_r>
 8001526:	2300      	movs	r3, #0
 8001528:	6363      	str	r3, [r4, #52]	; 0x34
 800152a:	89a3      	ldrh	r3, [r4, #12]
 800152c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001530:	81a3      	strh	r3, [r4, #12]
 8001532:	2300      	movs	r3, #0
 8001534:	6063      	str	r3, [r4, #4]
 8001536:	6923      	ldr	r3, [r4, #16]
 8001538:	6023      	str	r3, [r4, #0]
 800153a:	89a3      	ldrh	r3, [r4, #12]
 800153c:	f043 0308 	orr.w	r3, r3, #8
 8001540:	81a3      	strh	r3, [r4, #12]
 8001542:	6923      	ldr	r3, [r4, #16]
 8001544:	b94b      	cbnz	r3, 800155a <__swsetup_r+0x9a>
 8001546:	89a3      	ldrh	r3, [r4, #12]
 8001548:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800154c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001550:	d003      	beq.n	800155a <__swsetup_r+0x9a>
 8001552:	4621      	mov	r1, r4
 8001554:	4630      	mov	r0, r6
 8001556:	f000 f9ff 	bl	8001958 <__smakebuf_r>
 800155a:	89a0      	ldrh	r0, [r4, #12]
 800155c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001560:	f010 0301 	ands.w	r3, r0, #1
 8001564:	d00a      	beq.n	800157c <__swsetup_r+0xbc>
 8001566:	2300      	movs	r3, #0
 8001568:	60a3      	str	r3, [r4, #8]
 800156a:	6963      	ldr	r3, [r4, #20]
 800156c:	425b      	negs	r3, r3
 800156e:	61a3      	str	r3, [r4, #24]
 8001570:	6923      	ldr	r3, [r4, #16]
 8001572:	b943      	cbnz	r3, 8001586 <__swsetup_r+0xc6>
 8001574:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001578:	d1ba      	bne.n	80014f0 <__swsetup_r+0x30>
 800157a:	bd70      	pop	{r4, r5, r6, pc}
 800157c:	0781      	lsls	r1, r0, #30
 800157e:	bf58      	it	pl
 8001580:	6963      	ldrpl	r3, [r4, #20]
 8001582:	60a3      	str	r3, [r4, #8]
 8001584:	e7f4      	b.n	8001570 <__swsetup_r+0xb0>
 8001586:	2000      	movs	r0, #0
 8001588:	e7f7      	b.n	800157a <__swsetup_r+0xba>
 800158a:	bf00      	nop
 800158c:	20000018 	.word	0x20000018
 8001590:	08001ee8 	.word	0x08001ee8
 8001594:	08001f08 	.word	0x08001f08
 8001598:	08001ec8 	.word	0x08001ec8

0800159c <__sflush_r>:
 800159c:	898a      	ldrh	r2, [r1, #12]
 800159e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80015a2:	4605      	mov	r5, r0
 80015a4:	0710      	lsls	r0, r2, #28
 80015a6:	460c      	mov	r4, r1
 80015a8:	d458      	bmi.n	800165c <__sflush_r+0xc0>
 80015aa:	684b      	ldr	r3, [r1, #4]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	dc05      	bgt.n	80015bc <__sflush_r+0x20>
 80015b0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	dc02      	bgt.n	80015bc <__sflush_r+0x20>
 80015b6:	2000      	movs	r0, #0
 80015b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80015bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80015be:	2e00      	cmp	r6, #0
 80015c0:	d0f9      	beq.n	80015b6 <__sflush_r+0x1a>
 80015c2:	2300      	movs	r3, #0
 80015c4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80015c8:	682f      	ldr	r7, [r5, #0]
 80015ca:	602b      	str	r3, [r5, #0]
 80015cc:	d032      	beq.n	8001634 <__sflush_r+0x98>
 80015ce:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80015d0:	89a3      	ldrh	r3, [r4, #12]
 80015d2:	075a      	lsls	r2, r3, #29
 80015d4:	d505      	bpl.n	80015e2 <__sflush_r+0x46>
 80015d6:	6863      	ldr	r3, [r4, #4]
 80015d8:	1ac0      	subs	r0, r0, r3
 80015da:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80015dc:	b10b      	cbz	r3, 80015e2 <__sflush_r+0x46>
 80015de:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80015e0:	1ac0      	subs	r0, r0, r3
 80015e2:	2300      	movs	r3, #0
 80015e4:	4602      	mov	r2, r0
 80015e6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80015e8:	6a21      	ldr	r1, [r4, #32]
 80015ea:	4628      	mov	r0, r5
 80015ec:	47b0      	blx	r6
 80015ee:	1c43      	adds	r3, r0, #1
 80015f0:	89a3      	ldrh	r3, [r4, #12]
 80015f2:	d106      	bne.n	8001602 <__sflush_r+0x66>
 80015f4:	6829      	ldr	r1, [r5, #0]
 80015f6:	291d      	cmp	r1, #29
 80015f8:	d82c      	bhi.n	8001654 <__sflush_r+0xb8>
 80015fa:	4a2a      	ldr	r2, [pc, #168]	; (80016a4 <__sflush_r+0x108>)
 80015fc:	40ca      	lsrs	r2, r1
 80015fe:	07d6      	lsls	r6, r2, #31
 8001600:	d528      	bpl.n	8001654 <__sflush_r+0xb8>
 8001602:	2200      	movs	r2, #0
 8001604:	6062      	str	r2, [r4, #4]
 8001606:	04d9      	lsls	r1, r3, #19
 8001608:	6922      	ldr	r2, [r4, #16]
 800160a:	6022      	str	r2, [r4, #0]
 800160c:	d504      	bpl.n	8001618 <__sflush_r+0x7c>
 800160e:	1c42      	adds	r2, r0, #1
 8001610:	d101      	bne.n	8001616 <__sflush_r+0x7a>
 8001612:	682b      	ldr	r3, [r5, #0]
 8001614:	b903      	cbnz	r3, 8001618 <__sflush_r+0x7c>
 8001616:	6560      	str	r0, [r4, #84]	; 0x54
 8001618:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800161a:	602f      	str	r7, [r5, #0]
 800161c:	2900      	cmp	r1, #0
 800161e:	d0ca      	beq.n	80015b6 <__sflush_r+0x1a>
 8001620:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001624:	4299      	cmp	r1, r3
 8001626:	d002      	beq.n	800162e <__sflush_r+0x92>
 8001628:	4628      	mov	r0, r5
 800162a:	f000 f9d5 	bl	80019d8 <_free_r>
 800162e:	2000      	movs	r0, #0
 8001630:	6360      	str	r0, [r4, #52]	; 0x34
 8001632:	e7c1      	b.n	80015b8 <__sflush_r+0x1c>
 8001634:	6a21      	ldr	r1, [r4, #32]
 8001636:	2301      	movs	r3, #1
 8001638:	4628      	mov	r0, r5
 800163a:	47b0      	blx	r6
 800163c:	1c41      	adds	r1, r0, #1
 800163e:	d1c7      	bne.n	80015d0 <__sflush_r+0x34>
 8001640:	682b      	ldr	r3, [r5, #0]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d0c4      	beq.n	80015d0 <__sflush_r+0x34>
 8001646:	2b1d      	cmp	r3, #29
 8001648:	d001      	beq.n	800164e <__sflush_r+0xb2>
 800164a:	2b16      	cmp	r3, #22
 800164c:	d101      	bne.n	8001652 <__sflush_r+0xb6>
 800164e:	602f      	str	r7, [r5, #0]
 8001650:	e7b1      	b.n	80015b6 <__sflush_r+0x1a>
 8001652:	89a3      	ldrh	r3, [r4, #12]
 8001654:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001658:	81a3      	strh	r3, [r4, #12]
 800165a:	e7ad      	b.n	80015b8 <__sflush_r+0x1c>
 800165c:	690f      	ldr	r7, [r1, #16]
 800165e:	2f00      	cmp	r7, #0
 8001660:	d0a9      	beq.n	80015b6 <__sflush_r+0x1a>
 8001662:	0793      	lsls	r3, r2, #30
 8001664:	680e      	ldr	r6, [r1, #0]
 8001666:	bf08      	it	eq
 8001668:	694b      	ldreq	r3, [r1, #20]
 800166a:	600f      	str	r7, [r1, #0]
 800166c:	bf18      	it	ne
 800166e:	2300      	movne	r3, #0
 8001670:	eba6 0807 	sub.w	r8, r6, r7
 8001674:	608b      	str	r3, [r1, #8]
 8001676:	f1b8 0f00 	cmp.w	r8, #0
 800167a:	dd9c      	ble.n	80015b6 <__sflush_r+0x1a>
 800167c:	6a21      	ldr	r1, [r4, #32]
 800167e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001680:	4643      	mov	r3, r8
 8001682:	463a      	mov	r2, r7
 8001684:	4628      	mov	r0, r5
 8001686:	47b0      	blx	r6
 8001688:	2800      	cmp	r0, #0
 800168a:	dc06      	bgt.n	800169a <__sflush_r+0xfe>
 800168c:	89a3      	ldrh	r3, [r4, #12]
 800168e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001692:	81a3      	strh	r3, [r4, #12]
 8001694:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001698:	e78e      	b.n	80015b8 <__sflush_r+0x1c>
 800169a:	4407      	add	r7, r0
 800169c:	eba8 0800 	sub.w	r8, r8, r0
 80016a0:	e7e9      	b.n	8001676 <__sflush_r+0xda>
 80016a2:	bf00      	nop
 80016a4:	20400001 	.word	0x20400001

080016a8 <_fflush_r>:
 80016a8:	b538      	push	{r3, r4, r5, lr}
 80016aa:	690b      	ldr	r3, [r1, #16]
 80016ac:	4605      	mov	r5, r0
 80016ae:	460c      	mov	r4, r1
 80016b0:	b913      	cbnz	r3, 80016b8 <_fflush_r+0x10>
 80016b2:	2500      	movs	r5, #0
 80016b4:	4628      	mov	r0, r5
 80016b6:	bd38      	pop	{r3, r4, r5, pc}
 80016b8:	b118      	cbz	r0, 80016c2 <_fflush_r+0x1a>
 80016ba:	6983      	ldr	r3, [r0, #24]
 80016bc:	b90b      	cbnz	r3, 80016c2 <_fflush_r+0x1a>
 80016be:	f000 f887 	bl	80017d0 <__sinit>
 80016c2:	4b14      	ldr	r3, [pc, #80]	; (8001714 <_fflush_r+0x6c>)
 80016c4:	429c      	cmp	r4, r3
 80016c6:	d11b      	bne.n	8001700 <_fflush_r+0x58>
 80016c8:	686c      	ldr	r4, [r5, #4]
 80016ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d0ef      	beq.n	80016b2 <_fflush_r+0xa>
 80016d2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80016d4:	07d0      	lsls	r0, r2, #31
 80016d6:	d404      	bmi.n	80016e2 <_fflush_r+0x3a>
 80016d8:	0599      	lsls	r1, r3, #22
 80016da:	d402      	bmi.n	80016e2 <_fflush_r+0x3a>
 80016dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80016de:	f000 f915 	bl	800190c <__retarget_lock_acquire_recursive>
 80016e2:	4628      	mov	r0, r5
 80016e4:	4621      	mov	r1, r4
 80016e6:	f7ff ff59 	bl	800159c <__sflush_r>
 80016ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80016ec:	07da      	lsls	r2, r3, #31
 80016ee:	4605      	mov	r5, r0
 80016f0:	d4e0      	bmi.n	80016b4 <_fflush_r+0xc>
 80016f2:	89a3      	ldrh	r3, [r4, #12]
 80016f4:	059b      	lsls	r3, r3, #22
 80016f6:	d4dd      	bmi.n	80016b4 <_fflush_r+0xc>
 80016f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80016fa:	f000 f908 	bl	800190e <__retarget_lock_release_recursive>
 80016fe:	e7d9      	b.n	80016b4 <_fflush_r+0xc>
 8001700:	4b05      	ldr	r3, [pc, #20]	; (8001718 <_fflush_r+0x70>)
 8001702:	429c      	cmp	r4, r3
 8001704:	d101      	bne.n	800170a <_fflush_r+0x62>
 8001706:	68ac      	ldr	r4, [r5, #8]
 8001708:	e7df      	b.n	80016ca <_fflush_r+0x22>
 800170a:	4b04      	ldr	r3, [pc, #16]	; (800171c <_fflush_r+0x74>)
 800170c:	429c      	cmp	r4, r3
 800170e:	bf08      	it	eq
 8001710:	68ec      	ldreq	r4, [r5, #12]
 8001712:	e7da      	b.n	80016ca <_fflush_r+0x22>
 8001714:	08001ee8 	.word	0x08001ee8
 8001718:	08001f08 	.word	0x08001f08
 800171c:	08001ec8 	.word	0x08001ec8

08001720 <std>:
 8001720:	2300      	movs	r3, #0
 8001722:	b510      	push	{r4, lr}
 8001724:	4604      	mov	r4, r0
 8001726:	e9c0 3300 	strd	r3, r3, [r0]
 800172a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800172e:	6083      	str	r3, [r0, #8]
 8001730:	8181      	strh	r1, [r0, #12]
 8001732:	6643      	str	r3, [r0, #100]	; 0x64
 8001734:	81c2      	strh	r2, [r0, #14]
 8001736:	6183      	str	r3, [r0, #24]
 8001738:	4619      	mov	r1, r3
 800173a:	2208      	movs	r2, #8
 800173c:	305c      	adds	r0, #92	; 0x5c
 800173e:	f7ff fb3f 	bl	8000dc0 <memset>
 8001742:	4b05      	ldr	r3, [pc, #20]	; (8001758 <std+0x38>)
 8001744:	6263      	str	r3, [r4, #36]	; 0x24
 8001746:	4b05      	ldr	r3, [pc, #20]	; (800175c <std+0x3c>)
 8001748:	62a3      	str	r3, [r4, #40]	; 0x28
 800174a:	4b05      	ldr	r3, [pc, #20]	; (8001760 <std+0x40>)
 800174c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800174e:	4b05      	ldr	r3, [pc, #20]	; (8001764 <std+0x44>)
 8001750:	6224      	str	r4, [r4, #32]
 8001752:	6323      	str	r3, [r4, #48]	; 0x30
 8001754:	bd10      	pop	{r4, pc}
 8001756:	bf00      	nop
 8001758:	08001bdd 	.word	0x08001bdd
 800175c:	08001bff 	.word	0x08001bff
 8001760:	08001c37 	.word	0x08001c37
 8001764:	08001c5b 	.word	0x08001c5b

08001768 <_cleanup_r>:
 8001768:	4901      	ldr	r1, [pc, #4]	; (8001770 <_cleanup_r+0x8>)
 800176a:	f000 b8af 	b.w	80018cc <_fwalk_reent>
 800176e:	bf00      	nop
 8001770:	080016a9 	.word	0x080016a9

08001774 <__sfmoreglue>:
 8001774:	b570      	push	{r4, r5, r6, lr}
 8001776:	1e4a      	subs	r2, r1, #1
 8001778:	2568      	movs	r5, #104	; 0x68
 800177a:	4355      	muls	r5, r2
 800177c:	460e      	mov	r6, r1
 800177e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001782:	f000 f979 	bl	8001a78 <_malloc_r>
 8001786:	4604      	mov	r4, r0
 8001788:	b140      	cbz	r0, 800179c <__sfmoreglue+0x28>
 800178a:	2100      	movs	r1, #0
 800178c:	e9c0 1600 	strd	r1, r6, [r0]
 8001790:	300c      	adds	r0, #12
 8001792:	60a0      	str	r0, [r4, #8]
 8001794:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001798:	f7ff fb12 	bl	8000dc0 <memset>
 800179c:	4620      	mov	r0, r4
 800179e:	bd70      	pop	{r4, r5, r6, pc}

080017a0 <__sfp_lock_acquire>:
 80017a0:	4801      	ldr	r0, [pc, #4]	; (80017a8 <__sfp_lock_acquire+0x8>)
 80017a2:	f000 b8b3 	b.w	800190c <__retarget_lock_acquire_recursive>
 80017a6:	bf00      	nop
 80017a8:	200000e4 	.word	0x200000e4

080017ac <__sfp_lock_release>:
 80017ac:	4801      	ldr	r0, [pc, #4]	; (80017b4 <__sfp_lock_release+0x8>)
 80017ae:	f000 b8ae 	b.w	800190e <__retarget_lock_release_recursive>
 80017b2:	bf00      	nop
 80017b4:	200000e4 	.word	0x200000e4

080017b8 <__sinit_lock_acquire>:
 80017b8:	4801      	ldr	r0, [pc, #4]	; (80017c0 <__sinit_lock_acquire+0x8>)
 80017ba:	f000 b8a7 	b.w	800190c <__retarget_lock_acquire_recursive>
 80017be:	bf00      	nop
 80017c0:	200000df 	.word	0x200000df

080017c4 <__sinit_lock_release>:
 80017c4:	4801      	ldr	r0, [pc, #4]	; (80017cc <__sinit_lock_release+0x8>)
 80017c6:	f000 b8a2 	b.w	800190e <__retarget_lock_release_recursive>
 80017ca:	bf00      	nop
 80017cc:	200000df 	.word	0x200000df

080017d0 <__sinit>:
 80017d0:	b510      	push	{r4, lr}
 80017d2:	4604      	mov	r4, r0
 80017d4:	f7ff fff0 	bl	80017b8 <__sinit_lock_acquire>
 80017d8:	69a3      	ldr	r3, [r4, #24]
 80017da:	b11b      	cbz	r3, 80017e4 <__sinit+0x14>
 80017dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80017e0:	f7ff bff0 	b.w	80017c4 <__sinit_lock_release>
 80017e4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80017e8:	6523      	str	r3, [r4, #80]	; 0x50
 80017ea:	4b13      	ldr	r3, [pc, #76]	; (8001838 <__sinit+0x68>)
 80017ec:	4a13      	ldr	r2, [pc, #76]	; (800183c <__sinit+0x6c>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	62a2      	str	r2, [r4, #40]	; 0x28
 80017f2:	42a3      	cmp	r3, r4
 80017f4:	bf04      	itt	eq
 80017f6:	2301      	moveq	r3, #1
 80017f8:	61a3      	streq	r3, [r4, #24]
 80017fa:	4620      	mov	r0, r4
 80017fc:	f000 f820 	bl	8001840 <__sfp>
 8001800:	6060      	str	r0, [r4, #4]
 8001802:	4620      	mov	r0, r4
 8001804:	f000 f81c 	bl	8001840 <__sfp>
 8001808:	60a0      	str	r0, [r4, #8]
 800180a:	4620      	mov	r0, r4
 800180c:	f000 f818 	bl	8001840 <__sfp>
 8001810:	2200      	movs	r2, #0
 8001812:	60e0      	str	r0, [r4, #12]
 8001814:	2104      	movs	r1, #4
 8001816:	6860      	ldr	r0, [r4, #4]
 8001818:	f7ff ff82 	bl	8001720 <std>
 800181c:	68a0      	ldr	r0, [r4, #8]
 800181e:	2201      	movs	r2, #1
 8001820:	2109      	movs	r1, #9
 8001822:	f7ff ff7d 	bl	8001720 <std>
 8001826:	68e0      	ldr	r0, [r4, #12]
 8001828:	2202      	movs	r2, #2
 800182a:	2112      	movs	r1, #18
 800182c:	f7ff ff78 	bl	8001720 <std>
 8001830:	2301      	movs	r3, #1
 8001832:	61a3      	str	r3, [r4, #24]
 8001834:	e7d2      	b.n	80017dc <__sinit+0xc>
 8001836:	bf00      	nop
 8001838:	08001e90 	.word	0x08001e90
 800183c:	08001769 	.word	0x08001769

08001840 <__sfp>:
 8001840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001842:	4607      	mov	r7, r0
 8001844:	f7ff ffac 	bl	80017a0 <__sfp_lock_acquire>
 8001848:	4b1e      	ldr	r3, [pc, #120]	; (80018c4 <__sfp+0x84>)
 800184a:	681e      	ldr	r6, [r3, #0]
 800184c:	69b3      	ldr	r3, [r6, #24]
 800184e:	b913      	cbnz	r3, 8001856 <__sfp+0x16>
 8001850:	4630      	mov	r0, r6
 8001852:	f7ff ffbd 	bl	80017d0 <__sinit>
 8001856:	3648      	adds	r6, #72	; 0x48
 8001858:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800185c:	3b01      	subs	r3, #1
 800185e:	d503      	bpl.n	8001868 <__sfp+0x28>
 8001860:	6833      	ldr	r3, [r6, #0]
 8001862:	b30b      	cbz	r3, 80018a8 <__sfp+0x68>
 8001864:	6836      	ldr	r6, [r6, #0]
 8001866:	e7f7      	b.n	8001858 <__sfp+0x18>
 8001868:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800186c:	b9d5      	cbnz	r5, 80018a4 <__sfp+0x64>
 800186e:	4b16      	ldr	r3, [pc, #88]	; (80018c8 <__sfp+0x88>)
 8001870:	60e3      	str	r3, [r4, #12]
 8001872:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001876:	6665      	str	r5, [r4, #100]	; 0x64
 8001878:	f000 f847 	bl	800190a <__retarget_lock_init_recursive>
 800187c:	f7ff ff96 	bl	80017ac <__sfp_lock_release>
 8001880:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8001884:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8001888:	6025      	str	r5, [r4, #0]
 800188a:	61a5      	str	r5, [r4, #24]
 800188c:	2208      	movs	r2, #8
 800188e:	4629      	mov	r1, r5
 8001890:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001894:	f7ff fa94 	bl	8000dc0 <memset>
 8001898:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800189c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80018a0:	4620      	mov	r0, r4
 80018a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80018a4:	3468      	adds	r4, #104	; 0x68
 80018a6:	e7d9      	b.n	800185c <__sfp+0x1c>
 80018a8:	2104      	movs	r1, #4
 80018aa:	4638      	mov	r0, r7
 80018ac:	f7ff ff62 	bl	8001774 <__sfmoreglue>
 80018b0:	4604      	mov	r4, r0
 80018b2:	6030      	str	r0, [r6, #0]
 80018b4:	2800      	cmp	r0, #0
 80018b6:	d1d5      	bne.n	8001864 <__sfp+0x24>
 80018b8:	f7ff ff78 	bl	80017ac <__sfp_lock_release>
 80018bc:	230c      	movs	r3, #12
 80018be:	603b      	str	r3, [r7, #0]
 80018c0:	e7ee      	b.n	80018a0 <__sfp+0x60>
 80018c2:	bf00      	nop
 80018c4:	08001e90 	.word	0x08001e90
 80018c8:	ffff0001 	.word	0xffff0001

080018cc <_fwalk_reent>:
 80018cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80018d0:	4606      	mov	r6, r0
 80018d2:	4688      	mov	r8, r1
 80018d4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80018d8:	2700      	movs	r7, #0
 80018da:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80018de:	f1b9 0901 	subs.w	r9, r9, #1
 80018e2:	d505      	bpl.n	80018f0 <_fwalk_reent+0x24>
 80018e4:	6824      	ldr	r4, [r4, #0]
 80018e6:	2c00      	cmp	r4, #0
 80018e8:	d1f7      	bne.n	80018da <_fwalk_reent+0xe>
 80018ea:	4638      	mov	r0, r7
 80018ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80018f0:	89ab      	ldrh	r3, [r5, #12]
 80018f2:	2b01      	cmp	r3, #1
 80018f4:	d907      	bls.n	8001906 <_fwalk_reent+0x3a>
 80018f6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80018fa:	3301      	adds	r3, #1
 80018fc:	d003      	beq.n	8001906 <_fwalk_reent+0x3a>
 80018fe:	4629      	mov	r1, r5
 8001900:	4630      	mov	r0, r6
 8001902:	47c0      	blx	r8
 8001904:	4307      	orrs	r7, r0
 8001906:	3568      	adds	r5, #104	; 0x68
 8001908:	e7e9      	b.n	80018de <_fwalk_reent+0x12>

0800190a <__retarget_lock_init_recursive>:
 800190a:	4770      	bx	lr

0800190c <__retarget_lock_acquire_recursive>:
 800190c:	4770      	bx	lr

0800190e <__retarget_lock_release_recursive>:
 800190e:	4770      	bx	lr

08001910 <__swhatbuf_r>:
 8001910:	b570      	push	{r4, r5, r6, lr}
 8001912:	460e      	mov	r6, r1
 8001914:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001918:	2900      	cmp	r1, #0
 800191a:	b096      	sub	sp, #88	; 0x58
 800191c:	4614      	mov	r4, r2
 800191e:	461d      	mov	r5, r3
 8001920:	da07      	bge.n	8001932 <__swhatbuf_r+0x22>
 8001922:	2300      	movs	r3, #0
 8001924:	602b      	str	r3, [r5, #0]
 8001926:	89b3      	ldrh	r3, [r6, #12]
 8001928:	061a      	lsls	r2, r3, #24
 800192a:	d410      	bmi.n	800194e <__swhatbuf_r+0x3e>
 800192c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001930:	e00e      	b.n	8001950 <__swhatbuf_r+0x40>
 8001932:	466a      	mov	r2, sp
 8001934:	f000 f9b8 	bl	8001ca8 <_fstat_r>
 8001938:	2800      	cmp	r0, #0
 800193a:	dbf2      	blt.n	8001922 <__swhatbuf_r+0x12>
 800193c:	9a01      	ldr	r2, [sp, #4]
 800193e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001942:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001946:	425a      	negs	r2, r3
 8001948:	415a      	adcs	r2, r3
 800194a:	602a      	str	r2, [r5, #0]
 800194c:	e7ee      	b.n	800192c <__swhatbuf_r+0x1c>
 800194e:	2340      	movs	r3, #64	; 0x40
 8001950:	2000      	movs	r0, #0
 8001952:	6023      	str	r3, [r4, #0]
 8001954:	b016      	add	sp, #88	; 0x58
 8001956:	bd70      	pop	{r4, r5, r6, pc}

08001958 <__smakebuf_r>:
 8001958:	898b      	ldrh	r3, [r1, #12]
 800195a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800195c:	079d      	lsls	r5, r3, #30
 800195e:	4606      	mov	r6, r0
 8001960:	460c      	mov	r4, r1
 8001962:	d507      	bpl.n	8001974 <__smakebuf_r+0x1c>
 8001964:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001968:	6023      	str	r3, [r4, #0]
 800196a:	6123      	str	r3, [r4, #16]
 800196c:	2301      	movs	r3, #1
 800196e:	6163      	str	r3, [r4, #20]
 8001970:	b002      	add	sp, #8
 8001972:	bd70      	pop	{r4, r5, r6, pc}
 8001974:	ab01      	add	r3, sp, #4
 8001976:	466a      	mov	r2, sp
 8001978:	f7ff ffca 	bl	8001910 <__swhatbuf_r>
 800197c:	9900      	ldr	r1, [sp, #0]
 800197e:	4605      	mov	r5, r0
 8001980:	4630      	mov	r0, r6
 8001982:	f000 f879 	bl	8001a78 <_malloc_r>
 8001986:	b948      	cbnz	r0, 800199c <__smakebuf_r+0x44>
 8001988:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800198c:	059a      	lsls	r2, r3, #22
 800198e:	d4ef      	bmi.n	8001970 <__smakebuf_r+0x18>
 8001990:	f023 0303 	bic.w	r3, r3, #3
 8001994:	f043 0302 	orr.w	r3, r3, #2
 8001998:	81a3      	strh	r3, [r4, #12]
 800199a:	e7e3      	b.n	8001964 <__smakebuf_r+0xc>
 800199c:	4b0d      	ldr	r3, [pc, #52]	; (80019d4 <__smakebuf_r+0x7c>)
 800199e:	62b3      	str	r3, [r6, #40]	; 0x28
 80019a0:	89a3      	ldrh	r3, [r4, #12]
 80019a2:	6020      	str	r0, [r4, #0]
 80019a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019a8:	81a3      	strh	r3, [r4, #12]
 80019aa:	9b00      	ldr	r3, [sp, #0]
 80019ac:	6163      	str	r3, [r4, #20]
 80019ae:	9b01      	ldr	r3, [sp, #4]
 80019b0:	6120      	str	r0, [r4, #16]
 80019b2:	b15b      	cbz	r3, 80019cc <__smakebuf_r+0x74>
 80019b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80019b8:	4630      	mov	r0, r6
 80019ba:	f000 f987 	bl	8001ccc <_isatty_r>
 80019be:	b128      	cbz	r0, 80019cc <__smakebuf_r+0x74>
 80019c0:	89a3      	ldrh	r3, [r4, #12]
 80019c2:	f023 0303 	bic.w	r3, r3, #3
 80019c6:	f043 0301 	orr.w	r3, r3, #1
 80019ca:	81a3      	strh	r3, [r4, #12]
 80019cc:	89a0      	ldrh	r0, [r4, #12]
 80019ce:	4305      	orrs	r5, r0
 80019d0:	81a5      	strh	r5, [r4, #12]
 80019d2:	e7cd      	b.n	8001970 <__smakebuf_r+0x18>
 80019d4:	08001769 	.word	0x08001769

080019d8 <_free_r>:
 80019d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80019da:	2900      	cmp	r1, #0
 80019dc:	d048      	beq.n	8001a70 <_free_r+0x98>
 80019de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80019e2:	9001      	str	r0, [sp, #4]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	f1a1 0404 	sub.w	r4, r1, #4
 80019ea:	bfb8      	it	lt
 80019ec:	18e4      	addlt	r4, r4, r3
 80019ee:	f000 f98f 	bl	8001d10 <__malloc_lock>
 80019f2:	4a20      	ldr	r2, [pc, #128]	; (8001a74 <_free_r+0x9c>)
 80019f4:	9801      	ldr	r0, [sp, #4]
 80019f6:	6813      	ldr	r3, [r2, #0]
 80019f8:	4615      	mov	r5, r2
 80019fa:	b933      	cbnz	r3, 8001a0a <_free_r+0x32>
 80019fc:	6063      	str	r3, [r4, #4]
 80019fe:	6014      	str	r4, [r2, #0]
 8001a00:	b003      	add	sp, #12
 8001a02:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001a06:	f000 b989 	b.w	8001d1c <__malloc_unlock>
 8001a0a:	42a3      	cmp	r3, r4
 8001a0c:	d90b      	bls.n	8001a26 <_free_r+0x4e>
 8001a0e:	6821      	ldr	r1, [r4, #0]
 8001a10:	1862      	adds	r2, r4, r1
 8001a12:	4293      	cmp	r3, r2
 8001a14:	bf04      	itt	eq
 8001a16:	681a      	ldreq	r2, [r3, #0]
 8001a18:	685b      	ldreq	r3, [r3, #4]
 8001a1a:	6063      	str	r3, [r4, #4]
 8001a1c:	bf04      	itt	eq
 8001a1e:	1852      	addeq	r2, r2, r1
 8001a20:	6022      	streq	r2, [r4, #0]
 8001a22:	602c      	str	r4, [r5, #0]
 8001a24:	e7ec      	b.n	8001a00 <_free_r+0x28>
 8001a26:	461a      	mov	r2, r3
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	b10b      	cbz	r3, 8001a30 <_free_r+0x58>
 8001a2c:	42a3      	cmp	r3, r4
 8001a2e:	d9fa      	bls.n	8001a26 <_free_r+0x4e>
 8001a30:	6811      	ldr	r1, [r2, #0]
 8001a32:	1855      	adds	r5, r2, r1
 8001a34:	42a5      	cmp	r5, r4
 8001a36:	d10b      	bne.n	8001a50 <_free_r+0x78>
 8001a38:	6824      	ldr	r4, [r4, #0]
 8001a3a:	4421      	add	r1, r4
 8001a3c:	1854      	adds	r4, r2, r1
 8001a3e:	42a3      	cmp	r3, r4
 8001a40:	6011      	str	r1, [r2, #0]
 8001a42:	d1dd      	bne.n	8001a00 <_free_r+0x28>
 8001a44:	681c      	ldr	r4, [r3, #0]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	6053      	str	r3, [r2, #4]
 8001a4a:	4421      	add	r1, r4
 8001a4c:	6011      	str	r1, [r2, #0]
 8001a4e:	e7d7      	b.n	8001a00 <_free_r+0x28>
 8001a50:	d902      	bls.n	8001a58 <_free_r+0x80>
 8001a52:	230c      	movs	r3, #12
 8001a54:	6003      	str	r3, [r0, #0]
 8001a56:	e7d3      	b.n	8001a00 <_free_r+0x28>
 8001a58:	6825      	ldr	r5, [r4, #0]
 8001a5a:	1961      	adds	r1, r4, r5
 8001a5c:	428b      	cmp	r3, r1
 8001a5e:	bf04      	itt	eq
 8001a60:	6819      	ldreq	r1, [r3, #0]
 8001a62:	685b      	ldreq	r3, [r3, #4]
 8001a64:	6063      	str	r3, [r4, #4]
 8001a66:	bf04      	itt	eq
 8001a68:	1949      	addeq	r1, r1, r5
 8001a6a:	6021      	streq	r1, [r4, #0]
 8001a6c:	6054      	str	r4, [r2, #4]
 8001a6e:	e7c7      	b.n	8001a00 <_free_r+0x28>
 8001a70:	b003      	add	sp, #12
 8001a72:	bd30      	pop	{r4, r5, pc}
 8001a74:	2000009c 	.word	0x2000009c

08001a78 <_malloc_r>:
 8001a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a7a:	1ccd      	adds	r5, r1, #3
 8001a7c:	f025 0503 	bic.w	r5, r5, #3
 8001a80:	3508      	adds	r5, #8
 8001a82:	2d0c      	cmp	r5, #12
 8001a84:	bf38      	it	cc
 8001a86:	250c      	movcc	r5, #12
 8001a88:	2d00      	cmp	r5, #0
 8001a8a:	4606      	mov	r6, r0
 8001a8c:	db01      	blt.n	8001a92 <_malloc_r+0x1a>
 8001a8e:	42a9      	cmp	r1, r5
 8001a90:	d903      	bls.n	8001a9a <_malloc_r+0x22>
 8001a92:	230c      	movs	r3, #12
 8001a94:	6033      	str	r3, [r6, #0]
 8001a96:	2000      	movs	r0, #0
 8001a98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001a9a:	f000 f939 	bl	8001d10 <__malloc_lock>
 8001a9e:	4921      	ldr	r1, [pc, #132]	; (8001b24 <_malloc_r+0xac>)
 8001aa0:	680a      	ldr	r2, [r1, #0]
 8001aa2:	4614      	mov	r4, r2
 8001aa4:	b99c      	cbnz	r4, 8001ace <_malloc_r+0x56>
 8001aa6:	4f20      	ldr	r7, [pc, #128]	; (8001b28 <_malloc_r+0xb0>)
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	b923      	cbnz	r3, 8001ab6 <_malloc_r+0x3e>
 8001aac:	4621      	mov	r1, r4
 8001aae:	4630      	mov	r0, r6
 8001ab0:	f000 f884 	bl	8001bbc <_sbrk_r>
 8001ab4:	6038      	str	r0, [r7, #0]
 8001ab6:	4629      	mov	r1, r5
 8001ab8:	4630      	mov	r0, r6
 8001aba:	f000 f87f 	bl	8001bbc <_sbrk_r>
 8001abe:	1c43      	adds	r3, r0, #1
 8001ac0:	d123      	bne.n	8001b0a <_malloc_r+0x92>
 8001ac2:	230c      	movs	r3, #12
 8001ac4:	6033      	str	r3, [r6, #0]
 8001ac6:	4630      	mov	r0, r6
 8001ac8:	f000 f928 	bl	8001d1c <__malloc_unlock>
 8001acc:	e7e3      	b.n	8001a96 <_malloc_r+0x1e>
 8001ace:	6823      	ldr	r3, [r4, #0]
 8001ad0:	1b5b      	subs	r3, r3, r5
 8001ad2:	d417      	bmi.n	8001b04 <_malloc_r+0x8c>
 8001ad4:	2b0b      	cmp	r3, #11
 8001ad6:	d903      	bls.n	8001ae0 <_malloc_r+0x68>
 8001ad8:	6023      	str	r3, [r4, #0]
 8001ada:	441c      	add	r4, r3
 8001adc:	6025      	str	r5, [r4, #0]
 8001ade:	e004      	b.n	8001aea <_malloc_r+0x72>
 8001ae0:	6863      	ldr	r3, [r4, #4]
 8001ae2:	42a2      	cmp	r2, r4
 8001ae4:	bf0c      	ite	eq
 8001ae6:	600b      	streq	r3, [r1, #0]
 8001ae8:	6053      	strne	r3, [r2, #4]
 8001aea:	4630      	mov	r0, r6
 8001aec:	f000 f916 	bl	8001d1c <__malloc_unlock>
 8001af0:	f104 000b 	add.w	r0, r4, #11
 8001af4:	1d23      	adds	r3, r4, #4
 8001af6:	f020 0007 	bic.w	r0, r0, #7
 8001afa:	1ac2      	subs	r2, r0, r3
 8001afc:	d0cc      	beq.n	8001a98 <_malloc_r+0x20>
 8001afe:	1a1b      	subs	r3, r3, r0
 8001b00:	50a3      	str	r3, [r4, r2]
 8001b02:	e7c9      	b.n	8001a98 <_malloc_r+0x20>
 8001b04:	4622      	mov	r2, r4
 8001b06:	6864      	ldr	r4, [r4, #4]
 8001b08:	e7cc      	b.n	8001aa4 <_malloc_r+0x2c>
 8001b0a:	1cc4      	adds	r4, r0, #3
 8001b0c:	f024 0403 	bic.w	r4, r4, #3
 8001b10:	42a0      	cmp	r0, r4
 8001b12:	d0e3      	beq.n	8001adc <_malloc_r+0x64>
 8001b14:	1a21      	subs	r1, r4, r0
 8001b16:	4630      	mov	r0, r6
 8001b18:	f000 f850 	bl	8001bbc <_sbrk_r>
 8001b1c:	3001      	adds	r0, #1
 8001b1e:	d1dd      	bne.n	8001adc <_malloc_r+0x64>
 8001b20:	e7cf      	b.n	8001ac2 <_malloc_r+0x4a>
 8001b22:	bf00      	nop
 8001b24:	2000009c 	.word	0x2000009c
 8001b28:	200000a0 	.word	0x200000a0

08001b2c <_putc_r>:
 8001b2c:	b570      	push	{r4, r5, r6, lr}
 8001b2e:	460d      	mov	r5, r1
 8001b30:	4614      	mov	r4, r2
 8001b32:	4606      	mov	r6, r0
 8001b34:	b118      	cbz	r0, 8001b3e <_putc_r+0x12>
 8001b36:	6983      	ldr	r3, [r0, #24]
 8001b38:	b90b      	cbnz	r3, 8001b3e <_putc_r+0x12>
 8001b3a:	f7ff fe49 	bl	80017d0 <__sinit>
 8001b3e:	4b1c      	ldr	r3, [pc, #112]	; (8001bb0 <_putc_r+0x84>)
 8001b40:	429c      	cmp	r4, r3
 8001b42:	d124      	bne.n	8001b8e <_putc_r+0x62>
 8001b44:	6874      	ldr	r4, [r6, #4]
 8001b46:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001b48:	07d8      	lsls	r0, r3, #31
 8001b4a:	d405      	bmi.n	8001b58 <_putc_r+0x2c>
 8001b4c:	89a3      	ldrh	r3, [r4, #12]
 8001b4e:	0599      	lsls	r1, r3, #22
 8001b50:	d402      	bmi.n	8001b58 <_putc_r+0x2c>
 8001b52:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001b54:	f7ff feda 	bl	800190c <__retarget_lock_acquire_recursive>
 8001b58:	68a3      	ldr	r3, [r4, #8]
 8001b5a:	3b01      	subs	r3, #1
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	60a3      	str	r3, [r4, #8]
 8001b60:	da05      	bge.n	8001b6e <_putc_r+0x42>
 8001b62:	69a2      	ldr	r2, [r4, #24]
 8001b64:	4293      	cmp	r3, r2
 8001b66:	db1c      	blt.n	8001ba2 <_putc_r+0x76>
 8001b68:	b2eb      	uxtb	r3, r5
 8001b6a:	2b0a      	cmp	r3, #10
 8001b6c:	d019      	beq.n	8001ba2 <_putc_r+0x76>
 8001b6e:	6823      	ldr	r3, [r4, #0]
 8001b70:	1c5a      	adds	r2, r3, #1
 8001b72:	6022      	str	r2, [r4, #0]
 8001b74:	701d      	strb	r5, [r3, #0]
 8001b76:	b2ed      	uxtb	r5, r5
 8001b78:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001b7a:	07da      	lsls	r2, r3, #31
 8001b7c:	d405      	bmi.n	8001b8a <_putc_r+0x5e>
 8001b7e:	89a3      	ldrh	r3, [r4, #12]
 8001b80:	059b      	lsls	r3, r3, #22
 8001b82:	d402      	bmi.n	8001b8a <_putc_r+0x5e>
 8001b84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001b86:	f7ff fec2 	bl	800190e <__retarget_lock_release_recursive>
 8001b8a:	4628      	mov	r0, r5
 8001b8c:	bd70      	pop	{r4, r5, r6, pc}
 8001b8e:	4b09      	ldr	r3, [pc, #36]	; (8001bb4 <_putc_r+0x88>)
 8001b90:	429c      	cmp	r4, r3
 8001b92:	d101      	bne.n	8001b98 <_putc_r+0x6c>
 8001b94:	68b4      	ldr	r4, [r6, #8]
 8001b96:	e7d6      	b.n	8001b46 <_putc_r+0x1a>
 8001b98:	4b07      	ldr	r3, [pc, #28]	; (8001bb8 <_putc_r+0x8c>)
 8001b9a:	429c      	cmp	r4, r3
 8001b9c:	bf08      	it	eq
 8001b9e:	68f4      	ldreq	r4, [r6, #12]
 8001ba0:	e7d1      	b.n	8001b46 <_putc_r+0x1a>
 8001ba2:	4629      	mov	r1, r5
 8001ba4:	4622      	mov	r2, r4
 8001ba6:	4630      	mov	r0, r6
 8001ba8:	f7ff fc38 	bl	800141c <__swbuf_r>
 8001bac:	4605      	mov	r5, r0
 8001bae:	e7e3      	b.n	8001b78 <_putc_r+0x4c>
 8001bb0:	08001ee8 	.word	0x08001ee8
 8001bb4:	08001f08 	.word	0x08001f08
 8001bb8:	08001ec8 	.word	0x08001ec8

08001bbc <_sbrk_r>:
 8001bbc:	b538      	push	{r3, r4, r5, lr}
 8001bbe:	4d06      	ldr	r5, [pc, #24]	; (8001bd8 <_sbrk_r+0x1c>)
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	4604      	mov	r4, r0
 8001bc4:	4608      	mov	r0, r1
 8001bc6:	602b      	str	r3, [r5, #0]
 8001bc8:	f000 f8e8 	bl	8001d9c <_sbrk>
 8001bcc:	1c43      	adds	r3, r0, #1
 8001bce:	d102      	bne.n	8001bd6 <_sbrk_r+0x1a>
 8001bd0:	682b      	ldr	r3, [r5, #0]
 8001bd2:	b103      	cbz	r3, 8001bd6 <_sbrk_r+0x1a>
 8001bd4:	6023      	str	r3, [r4, #0]
 8001bd6:	bd38      	pop	{r3, r4, r5, pc}
 8001bd8:	200000e8 	.word	0x200000e8

08001bdc <__sread>:
 8001bdc:	b510      	push	{r4, lr}
 8001bde:	460c      	mov	r4, r1
 8001be0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001be4:	f000 f8a0 	bl	8001d28 <_read_r>
 8001be8:	2800      	cmp	r0, #0
 8001bea:	bfab      	itete	ge
 8001bec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001bee:	89a3      	ldrhlt	r3, [r4, #12]
 8001bf0:	181b      	addge	r3, r3, r0
 8001bf2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001bf6:	bfac      	ite	ge
 8001bf8:	6563      	strge	r3, [r4, #84]	; 0x54
 8001bfa:	81a3      	strhlt	r3, [r4, #12]
 8001bfc:	bd10      	pop	{r4, pc}

08001bfe <__swrite>:
 8001bfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c02:	461f      	mov	r7, r3
 8001c04:	898b      	ldrh	r3, [r1, #12]
 8001c06:	05db      	lsls	r3, r3, #23
 8001c08:	4605      	mov	r5, r0
 8001c0a:	460c      	mov	r4, r1
 8001c0c:	4616      	mov	r6, r2
 8001c0e:	d505      	bpl.n	8001c1c <__swrite+0x1e>
 8001c10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001c14:	2302      	movs	r3, #2
 8001c16:	2200      	movs	r2, #0
 8001c18:	f000 f868 	bl	8001cec <_lseek_r>
 8001c1c:	89a3      	ldrh	r3, [r4, #12]
 8001c1e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001c22:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001c26:	81a3      	strh	r3, [r4, #12]
 8001c28:	4632      	mov	r2, r6
 8001c2a:	463b      	mov	r3, r7
 8001c2c:	4628      	mov	r0, r5
 8001c2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001c32:	f000 b817 	b.w	8001c64 <_write_r>

08001c36 <__sseek>:
 8001c36:	b510      	push	{r4, lr}
 8001c38:	460c      	mov	r4, r1
 8001c3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001c3e:	f000 f855 	bl	8001cec <_lseek_r>
 8001c42:	1c43      	adds	r3, r0, #1
 8001c44:	89a3      	ldrh	r3, [r4, #12]
 8001c46:	bf15      	itete	ne
 8001c48:	6560      	strne	r0, [r4, #84]	; 0x54
 8001c4a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001c4e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001c52:	81a3      	strheq	r3, [r4, #12]
 8001c54:	bf18      	it	ne
 8001c56:	81a3      	strhne	r3, [r4, #12]
 8001c58:	bd10      	pop	{r4, pc}

08001c5a <__sclose>:
 8001c5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001c5e:	f000 b813 	b.w	8001c88 <_close_r>
	...

08001c64 <_write_r>:
 8001c64:	b538      	push	{r3, r4, r5, lr}
 8001c66:	4d07      	ldr	r5, [pc, #28]	; (8001c84 <_write_r+0x20>)
 8001c68:	4604      	mov	r4, r0
 8001c6a:	4608      	mov	r0, r1
 8001c6c:	4611      	mov	r1, r2
 8001c6e:	2200      	movs	r2, #0
 8001c70:	602a      	str	r2, [r5, #0]
 8001c72:	461a      	mov	r2, r3
 8001c74:	f7fe fb33 	bl	80002de <_write>
 8001c78:	1c43      	adds	r3, r0, #1
 8001c7a:	d102      	bne.n	8001c82 <_write_r+0x1e>
 8001c7c:	682b      	ldr	r3, [r5, #0]
 8001c7e:	b103      	cbz	r3, 8001c82 <_write_r+0x1e>
 8001c80:	6023      	str	r3, [r4, #0]
 8001c82:	bd38      	pop	{r3, r4, r5, pc}
 8001c84:	200000e8 	.word	0x200000e8

08001c88 <_close_r>:
 8001c88:	b538      	push	{r3, r4, r5, lr}
 8001c8a:	4d06      	ldr	r5, [pc, #24]	; (8001ca4 <_close_r+0x1c>)
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	4604      	mov	r4, r0
 8001c90:	4608      	mov	r0, r1
 8001c92:	602b      	str	r3, [r5, #0]
 8001c94:	f000 f85a 	bl	8001d4c <_close>
 8001c98:	1c43      	adds	r3, r0, #1
 8001c9a:	d102      	bne.n	8001ca2 <_close_r+0x1a>
 8001c9c:	682b      	ldr	r3, [r5, #0]
 8001c9e:	b103      	cbz	r3, 8001ca2 <_close_r+0x1a>
 8001ca0:	6023      	str	r3, [r4, #0]
 8001ca2:	bd38      	pop	{r3, r4, r5, pc}
 8001ca4:	200000e8 	.word	0x200000e8

08001ca8 <_fstat_r>:
 8001ca8:	b538      	push	{r3, r4, r5, lr}
 8001caa:	4d07      	ldr	r5, [pc, #28]	; (8001cc8 <_fstat_r+0x20>)
 8001cac:	2300      	movs	r3, #0
 8001cae:	4604      	mov	r4, r0
 8001cb0:	4608      	mov	r0, r1
 8001cb2:	4611      	mov	r1, r2
 8001cb4:	602b      	str	r3, [r5, #0]
 8001cb6:	f000 f851 	bl	8001d5c <_fstat>
 8001cba:	1c43      	adds	r3, r0, #1
 8001cbc:	d102      	bne.n	8001cc4 <_fstat_r+0x1c>
 8001cbe:	682b      	ldr	r3, [r5, #0]
 8001cc0:	b103      	cbz	r3, 8001cc4 <_fstat_r+0x1c>
 8001cc2:	6023      	str	r3, [r4, #0]
 8001cc4:	bd38      	pop	{r3, r4, r5, pc}
 8001cc6:	bf00      	nop
 8001cc8:	200000e8 	.word	0x200000e8

08001ccc <_isatty_r>:
 8001ccc:	b538      	push	{r3, r4, r5, lr}
 8001cce:	4d06      	ldr	r5, [pc, #24]	; (8001ce8 <_isatty_r+0x1c>)
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	4604      	mov	r4, r0
 8001cd4:	4608      	mov	r0, r1
 8001cd6:	602b      	str	r3, [r5, #0]
 8001cd8:	f000 f848 	bl	8001d6c <_isatty>
 8001cdc:	1c43      	adds	r3, r0, #1
 8001cde:	d102      	bne.n	8001ce6 <_isatty_r+0x1a>
 8001ce0:	682b      	ldr	r3, [r5, #0]
 8001ce2:	b103      	cbz	r3, 8001ce6 <_isatty_r+0x1a>
 8001ce4:	6023      	str	r3, [r4, #0]
 8001ce6:	bd38      	pop	{r3, r4, r5, pc}
 8001ce8:	200000e8 	.word	0x200000e8

08001cec <_lseek_r>:
 8001cec:	b538      	push	{r3, r4, r5, lr}
 8001cee:	4d07      	ldr	r5, [pc, #28]	; (8001d0c <_lseek_r+0x20>)
 8001cf0:	4604      	mov	r4, r0
 8001cf2:	4608      	mov	r0, r1
 8001cf4:	4611      	mov	r1, r2
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	602a      	str	r2, [r5, #0]
 8001cfa:	461a      	mov	r2, r3
 8001cfc:	f000 f83e 	bl	8001d7c <_lseek>
 8001d00:	1c43      	adds	r3, r0, #1
 8001d02:	d102      	bne.n	8001d0a <_lseek_r+0x1e>
 8001d04:	682b      	ldr	r3, [r5, #0]
 8001d06:	b103      	cbz	r3, 8001d0a <_lseek_r+0x1e>
 8001d08:	6023      	str	r3, [r4, #0]
 8001d0a:	bd38      	pop	{r3, r4, r5, pc}
 8001d0c:	200000e8 	.word	0x200000e8

08001d10 <__malloc_lock>:
 8001d10:	4801      	ldr	r0, [pc, #4]	; (8001d18 <__malloc_lock+0x8>)
 8001d12:	f7ff bdfb 	b.w	800190c <__retarget_lock_acquire_recursive>
 8001d16:	bf00      	nop
 8001d18:	200000e0 	.word	0x200000e0

08001d1c <__malloc_unlock>:
 8001d1c:	4801      	ldr	r0, [pc, #4]	; (8001d24 <__malloc_unlock+0x8>)
 8001d1e:	f7ff bdf6 	b.w	800190e <__retarget_lock_release_recursive>
 8001d22:	bf00      	nop
 8001d24:	200000e0 	.word	0x200000e0

08001d28 <_read_r>:
 8001d28:	b538      	push	{r3, r4, r5, lr}
 8001d2a:	4d07      	ldr	r5, [pc, #28]	; (8001d48 <_read_r+0x20>)
 8001d2c:	4604      	mov	r4, r0
 8001d2e:	4608      	mov	r0, r1
 8001d30:	4611      	mov	r1, r2
 8001d32:	2200      	movs	r2, #0
 8001d34:	602a      	str	r2, [r5, #0]
 8001d36:	461a      	mov	r2, r3
 8001d38:	f000 f828 	bl	8001d8c <_read>
 8001d3c:	1c43      	adds	r3, r0, #1
 8001d3e:	d102      	bne.n	8001d46 <_read_r+0x1e>
 8001d40:	682b      	ldr	r3, [r5, #0]
 8001d42:	b103      	cbz	r3, 8001d46 <_read_r+0x1e>
 8001d44:	6023      	str	r3, [r4, #0]
 8001d46:	bd38      	pop	{r3, r4, r5, pc}
 8001d48:	200000e8 	.word	0x200000e8

08001d4c <_close>:
 8001d4c:	4b02      	ldr	r3, [pc, #8]	; (8001d58 <_close+0xc>)
 8001d4e:	2258      	movs	r2, #88	; 0x58
 8001d50:	601a      	str	r2, [r3, #0]
 8001d52:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d56:	4770      	bx	lr
 8001d58:	200000e8 	.word	0x200000e8

08001d5c <_fstat>:
 8001d5c:	4b02      	ldr	r3, [pc, #8]	; (8001d68 <_fstat+0xc>)
 8001d5e:	2258      	movs	r2, #88	; 0x58
 8001d60:	601a      	str	r2, [r3, #0]
 8001d62:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d66:	4770      	bx	lr
 8001d68:	200000e8 	.word	0x200000e8

08001d6c <_isatty>:
 8001d6c:	4b02      	ldr	r3, [pc, #8]	; (8001d78 <_isatty+0xc>)
 8001d6e:	2258      	movs	r2, #88	; 0x58
 8001d70:	601a      	str	r2, [r3, #0]
 8001d72:	2000      	movs	r0, #0
 8001d74:	4770      	bx	lr
 8001d76:	bf00      	nop
 8001d78:	200000e8 	.word	0x200000e8

08001d7c <_lseek>:
 8001d7c:	4b02      	ldr	r3, [pc, #8]	; (8001d88 <_lseek+0xc>)
 8001d7e:	2258      	movs	r2, #88	; 0x58
 8001d80:	601a      	str	r2, [r3, #0]
 8001d82:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d86:	4770      	bx	lr
 8001d88:	200000e8 	.word	0x200000e8

08001d8c <_read>:
 8001d8c:	4b02      	ldr	r3, [pc, #8]	; (8001d98 <_read+0xc>)
 8001d8e:	2258      	movs	r2, #88	; 0x58
 8001d90:	601a      	str	r2, [r3, #0]
 8001d92:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d96:	4770      	bx	lr
 8001d98:	200000e8 	.word	0x200000e8

08001d9c <_sbrk>:
 8001d9c:	4b04      	ldr	r3, [pc, #16]	; (8001db0 <_sbrk+0x14>)
 8001d9e:	6819      	ldr	r1, [r3, #0]
 8001da0:	4602      	mov	r2, r0
 8001da2:	b909      	cbnz	r1, 8001da8 <_sbrk+0xc>
 8001da4:	4903      	ldr	r1, [pc, #12]	; (8001db4 <_sbrk+0x18>)
 8001da6:	6019      	str	r1, [r3, #0]
 8001da8:	6818      	ldr	r0, [r3, #0]
 8001daa:	4402      	add	r2, r0
 8001dac:	601a      	str	r2, [r3, #0]
 8001dae:	4770      	bx	lr
 8001db0:	200000a4 	.word	0x200000a4
 8001db4:	200000f0 	.word	0x200000f0

08001db8 <_init>:
 8001db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001dba:	bf00      	nop
 8001dbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001dbe:	bc08      	pop	{r3}
 8001dc0:	469e      	mov	lr, r3
 8001dc2:	4770      	bx	lr

08001dc4 <_fini>:
 8001dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001dc6:	bf00      	nop
 8001dc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001dca:	bc08      	pop	{r3}
 8001dcc:	469e      	mov	lr, r3
 8001dce:	4770      	bx	lr
