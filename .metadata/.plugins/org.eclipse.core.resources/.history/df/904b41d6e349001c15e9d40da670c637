#include "usbDriver.h"

void usb_gpio_init(void)
{
	//enable clock to the gpio pin
	SET_BIT(RCC->AHB1ENR, RCC_AHB1ENR_GPIOBEN);

	//configure the pb14 and pb15 as alternate mode
	MODIFY_REG(GPIOB->MODER,
			GPIO_MODER_MODER14 | GPIO_MODER_MODER15 ,
			GPIO_MODER_MODER14_1 | GPIO_MODER_MODER15_1);

	//usb pins D+ and D- are in alternate function  mode
	MODIFY_REG(GPIOB->AFR[1],
			GPIO_AFRH_AFSEL14 | GPIO_AFRH_AFSEL15,
			_VAL2FLD(GPIO_AFRH_AFSEL14,0xCUL) | _VAL2FLD(GPIO_AFRH_AFSEL15,0xCUL));

}

void usb_core_init(void)
{
	//Enable clock to usb otg hs module
	SET_BIT(RCC->AHB1ENR, RCC_AHB1ENR_OTGHSEN);

	//Unmask the Global Interrupt Line assertion to the core.
	MODIFY_REG(USB_OTG_HS_GLOBAL->GAHBCFG,
			USB_OTG_GAHBCFG_GINT,
			_VAL2FLD(USB_OTG_GAHBCFG_GINT,0x1UL));

	//Selecting USB2.0 High Speed and forcing the device to peripheral mode. Also setting the trdt value as specified in the manual
	MODIFY_REG(USB_OTG_HS_GLOBAL->GUSBCFG,
			USB_OTG_GUSBCFG_PHYSEL | USB_OTG_GUSBCFG_TRDT | USB_OTG_GUSBCFG_FDMOD,
			USB_OTG_GUSBCFG_PHYSEL | _VAL2FLD(USB_OTG_GUSBCFG_TRDT,0x9UL) | USB_OTG_GUSBCFG_FDMOD);

	//Unmasking mode mismatch, otg interrupt and rx buffer full mask
	MODIFY_REG(USB_OTG_HS_GLOBAL->GINTMSK,
			USB_OTG_GINTMSK_MMISM | USB_OTG_GINTMSK_OTGINT | USB_OTG_GINTMSK_RXFLVLM,
			USB_OTG_GINTMSK_MMISM | USB_OTG_GINTMSK_OTGINT | USB_OTG_GINTMSK_RXFLVLM);
}

void device_core_init()
{
	//Setting the device to use the internal embedded PHY layer and in Full Speed mode
	MODIFY_REG(USB_OTG_HS_DEVICE->DCFG,
			USB_OTG_DCFG_DSPD,
			_VAL2FLD(USB_OTG_DCFG_DSPD,0x3UL));

	//Clearing all the registers
		WRITE_REG(USB_OTG_HS_GLOBAL->GINTMSK,0xFFFFFFFFUL);

	//Unmasking the following interrupts : USB reset, Enumeration done, Early suspend, USB suspend, SOF
	MODIFY_REG(USB_OTG_HS_GLOBAL->GINTMSK,
			USB_OTG_GINTMSK_SOFM | USB_OTG_GINTMSK_ESUSPM | USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST | USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINTM | USB_OTG_GINTMSK_OEPINTM,
			USB_OTG_GINTMSK_SOFM | USB_OTG_GINTMSK_ESUSPM | USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST | USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINTM | USB_OTG_GINTMSK_OEPINTM);

	//Enabling the VBUS Sensing
	SET_BIT(USB_OTG_HS_GLOBAL->GCCFG,USB_OTG_GCCFG_VBUSASEN);


}

void connect_usb(void)
{
	//Disabling powerdown
	SET_BIT(USB_OTG_HS_GLOBAL->GCCFG,USB_OTG_GCCFG_PWRDWN);

	//Disabling soft disconnect
	CLEAR_BIT(USB_OTG_HS_DEVICE->DCTL,USB_OTG_DCTL_SDIS);
}

void disconnect_usb(void)
{
	//Enabling soft disconnect
	SET_BIT(USB_OTG_HS_DEVICE->DCTL,USB_OTG_DCTL_SDIS);

	//Enabling powerdown
	CLEAR_BIT(USB_OTG_HS_GLOBAL->GCCFG,USB_OTG_GCCFG_PWRDWN);
}

static void refresh_fifo_address(void)
{
	//Getting the starting address of tx FIFO by calculating where the RX FIFO ends
	uint32_t startAddress = _FLD2VAL(USB_OTG_GRXFSIZ_RXFD,USB_OTG_HS_GLOBAL->GRXFSIZ) * 4;

	//Setting the start address of TX0 FIFO register
	MODIFY_REG(USB_OTG_HS_GLOBAL->DIEPTXF0_HNPTXFSIZ,USB_OTG_TX0FSA,_VAL2FLD(USB_OTG_TX0FSA,startAddress));

	startAddress +=  _FLD2VAL(USB_OTG_TX0FD,USB_OTG_HS_GLOBAL->DIEPTXF0_HNPTXFSIZ) * 4;

	for (uint8_t i = 0 ; i <= MAXENDPOINT-1 ; i++ )
	{
		MODIFY_REG(USB_OTG_HS_GLOBAL->DIEPTXF[i], USB_OTG_NPTXFSA , _VAL2FLD(USB_OTG_NPTXFSA,startAddress));
		startAddress +=  _FLD2VAL(USB_OTG_NPTXFD,USB_OTG_HS_GLOBAL->DIEPTXF[i]) * 4;
	}
}

static void configure_rxfifo(uint8_t size)
{
	//fifo memory space allocation for rx including ability to receive back to back packets
	size = 10 + ( 2 * ( (size/4) + 1 ) );

	//the ram size required by rx fifo configuration
	MODIFY_REG(USB_OTG_HS_GLOBAL->GRXFSIZ,
			USB_OTG_GRXFSIZ_RXFD ,
			_VAL2FLD(USB_OTG_GRXFSIZ_RXFD,size));
	refresh_fifo_address();
}

static void configure_txfifo(uint8_t size, uint8_t endpoint_no)
{
	size = ( size + 3 ) / 4;

	if(endpoint_no == 0)
	{
		MODIFY_REG(USB_OTG_HS_GLOBAL->DIEPTXF0_HNPTXFSIZ, USB_OTG_TX0FD , _VAL2FLD(USB_OTG_TX0FD,size));
	}
	else
	{
		MODIFY_REG(USB_OTG_HS_GLOBAL->DIEPTXF[endpoint_no - 1], USB_OTG_NPTXFD , _VAL2FLD(USB_OTG_NPTXFD,size));
	}
	refresh_fifo_address();
}


/* @brief : Configures the endpoint 0
 * @parameters : endpointsize - The maximum size (in bytes) of the endpoint packets which is 64 bytes
 */

static void configure_endpoint0(uint8_t endpoint_size)
{
	//unmask all the interrupts regarding the end-point 0 to interrupt application when an event occurs
	SET_BIT(USB_OTG_HS_DEVICE->DAINTMSK, 1 << 0 | 1 << 16);

	//set nak, configure the maximum packet size and activate the endpoint
	MODIFY_REG(IEPNT(0)->DIEPCTL,
			USB_OTG_DIEPCTL_MPSIZ | USB_OTG_DIEPCTL_SNAK | USB_OTG_DIEPCTL_USBAEP,
			_VAL2FLD(USB_OTG_DIEPCTL_MPSIZ,endpoint_size) | USB_OTG_DIEPCTL_SNAK | USB_OTG_DIEPCTL_USBAEP);

	//clears NAK and enables data endpoint transmission
	SET_BIT(OEPNT(0)->DOEPCTL,
			USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);

	//configuring the rx and tx0 fifo
	configure_rxfifo(64);    //maximum possible size
	configure_txfifo(endpoint_size, 0);
}

static void configure_in_endpoint(uint8_t endpoint_no , USBEndPointType eptype , uint8_t endpoint_size)
{
	//unmask all the interrupts regarding the end-points to interrupt application when an event occurs
	SET_BIT(USB_OTG_HS_DEVICE->DAINTMSK, 1 << endpoint_no);

	//set nak, configure the maximum packet size and activate the endpoint and specify the type of the endpoint
	MODIFY_REG(IEPNT(endpoint_no)->DIEPCTL,
				USB_OTG_DIEPCTL_MPSIZ | USB_OTG_DIEPCTL_EPTYP | USB_OTG_DIEPCTL_SNAK | USB_OTG_DIEPCTL_TXFNUM | USB_OTG_DIEPCTL_USBAEP | USB_OTG_DIEPCTL_SD0PID_SEVNFRM,
				_VAL2FLD(USB_OTG_DIEPCTL_MPSIZ,endpoint_size) | _VAL2FLD(USB_OTG_DIEPCTL_MPSIZ,eptype) | USB_OTG_DIEPCTL_SNAK | _VAL2FLD(USB_OTG_DIEPCTL_TXFNUM,endpoint_no) | USB_OTG_DIEPCTL_USBAEP | USB_OTG_DIEPCTL_SD0PID_SEVNFRM);

	//configuring the tx fifo
	configure_txfifo(endpoint_size, endpoint_no);
}

static void flushRXFIFO(void)
{
	//Flush the rx fifo
	SET_BIT(USB_OTG_HS_GLOBAL->GRSTCTL,USB_OTG_GRSTCTL_RXFFLSH);

}

static void flushTXFIFO(uint8_t endpoint_no)
{
	//Flush the corresponding tx fifo wrt to endpoint number
	MODIFY_REG(USB_OTG_HS_GLOBAL->GRSTCTL,USB_OTG_GRSTCTL_TXFNUM , _VAL2FLD(USB_OTG_GRSTCTL_TXFNUM,endpoint_no) | USB_OTG_GRSTCTL_TXFFLSH);
}

static void deconfigure_in_endpoint(uint8_t endpoint_no )
{
	USB_OTG_INEndpointTypeDef* iepnt = IEPNT(endpoint_no);
	USB_OTG_OUTEndpointTypeDef* oepnt = OEPNT(endpoint_no);

	//Mask the interrupts of the targeted endpoint
	CLEAR_BIT(USB_OTG_HS_DEVICE->DAINTMSK, (1 << endpoint_no) | (1 << 16 << endpoint_no));

	//Clear all the pending interrupts
	SET_BIT(iepnt->DIEPINT,0x29FF);
	SET_BIT(oepnt->DOEPINT,0x715F);

	//Deactivating and disabling in endpoint
	if(iepnt->DIEPCTL & USB_OTG_DIEPCTL_EPENA)
	{
		SET_BIT(iepnt->DIEPCTL,USB_OTG_DIEPCTL_EPDIS);
	}
	CLEAR_BIT(iepnt->DIEPCTL,USB_OTG_DIEPCTL_USBAEP);

	//Deactivating and disabling out endpoint barring endpoint 0
	if(endpoint_no != 0)
	{
	if(oepnt->DOEPCTL & USB_OTG_DIOPCTL_EPENA)
	{
		SET_BIT(oepnt->DIOPCTL,USB_OTG_DIOPCTL_EPDIS);
	}
	CLEAR_BIT(iepnt->DIEPCTL,USB_OTG_DIEPCTL_USBAEP);
	}

	//Flushing the FIFO registers
	flushRXFIFO();
	flushTXFIFO(endpoint_no);
}


void usb_rst_handler(void)
{
	logInfo("USB reset occurred");
	for(uint8_t i =0; i<=MAXENDPOINT;i++)
	{
	deconfigure_in_endpoint(i);
	}
}

void gint_handlers(void)
{
 volatile uint32_t gint_stat = USB_OTG_HS_GLOBAL->GINTSTS;

 if(gint_stat & USB_OTG_GINTSTS_USBRST)				//usb reset handler
 {
	 usb_rst_handler();
	 SET_BIT(USB_OTG_HS_GLOBAL->GINTSTS,USB_OTG_GINTSTS_USBRST);     //clearing the interrupt flag
 }
 else if(gint_stat & USB_OTG_GINTSTS_ENUMDNE)		//enumeration done handler
 {


 }
 else if(gint_stat & USB_OTG_GINTSTS_RXFLVL)		//receive fifo empty handler
 {


 }
 else if(gint_stat & USB_OTG_GINTSTS_IEPINT)		//inendpoint handler
 {


 }
 else if(gint_stat & USB_OTG_GINTSTS_OEPINT)		//outendpoint handler
 {


 }
}
